"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-ignore
const signature_nodejs_1 = require("@cloudbase/signature-nodejs");
const util_1 = __importDefault(require("util"));
const url_1 = __importDefault(require("url"));
const query_string_1 = __importDefault(require("query-string"));
const request_1 = require("./request");
const error_1 = require("./error");
const debuglog = util_1.default.debuglog('weda-request');
/** 默认接口请求地址 */
const WEDA_API_URL = {
    /** 运行态接口 */
    runtime: {
        /** 线网地址 */
        prod: 'https://gateway.weda.tencent-cloud.com/wedaapi',
        /** 体验地址 */
        demo: 'https://gateway-demo.weda.tencent-cloud.com/wedaapi',
        /** 预发地址 */
        pre: 'https://gateway-preview.weda.tencent-cloud.com/wedaapi',
    },
    /** 设计态接口 */
    design: {
        /** 线网地址 */
        prod: 'https://gateway.weda.tencent-cloud.com/designrestful',
        /** 体验地址 */
        demo: 'https://gateway-demo.weda.tencent-cloud.com/designrestful',
        /** 预发地址 */
        pre: 'https://gateway-preview.weda.tencent-cloud.com/designrestful',
    }
};
/** 默认配置 */
const DEFAULT_CONFIG = {
    url: WEDA_API_URL.runtime.prod,
    method: 'POST',
};
async function wedaRequest(params, config) {
    const logger = (config === null || config === void 0 ? void 0 : config.logger) || debuglog;
    logger('[wedaRequest] raw params: ', Object.assign(Object.assign({}, params), { credentials: (params === null || params === void 0 ? void 0 : params.credentials) ? '<masked credentials>' : '<no credentials provided>' }), 'config', config);
    const commonConfig = Object.assign(Object.assign({}, DEFAULT_CONFIG), (config || {}));
    let url = commonConfig.url;
    if (commonConfig.target || commonConfig.serviceType) {
        if (commonConfig.target && /^https?:\/\//i.test(commonConfig.target)) {
            url = commonConfig.target;
        }
        else {
            const targetMap = WEDA_API_URL[commonConfig.serviceType] || WEDA_API_URL.runtime;
            url = targetMap[commonConfig.target] || targetMap.prod;
        }
    }
    commonConfig.url = url || WEDA_API_URL.runtime.prod;
    let credentials = params.credentials;
    if (typeof credentials === 'function') {
        try {
            credentials = await credentials();
        }
        catch (e) {
            throw new error_1.CloudBaseError(e.message, {
                action: '_credentials_',
                original: e
            });
        }
    }
    /** 请求参数 */
    const data = Object.assign(Object.assign({}, (params.data || {})), { Action: params.action, EnvType: params.envType, EnvId: params.envId, Uid: params.uid, Source: params.source, ClientIp: params.clientIp, RequestId: params.requestId });
    const method = commonConfig.method.toUpperCase();
    const requestConfig = {
        method
    };
    let body = '';
    // 设置 content-type 及 body/querystring
    commonConfig.headers = commonConfig.headers || {};
    if (['GET', 'DELETE'].includes(method)) {
        let url = commonConfig.url;
        commonConfig.headers['Content-Type'] = 'application/x-www-form-urlencoded';
        url += /\?/.test(commonConfig.url) ? '&' : '?';
        url += query_string_1.default.stringify(data);
        commonConfig.url = url;
    }
    else if (['POST', 'PUT'].includes(method)) {
        commonConfig.headers['Content-Type'] = 'application/json';
        requestConfig.body = JSON.stringify(data);
        body = requestConfig.body;
    }
    const headers = getHeaders(Object.assign(Object.assign({}, commonConfig), { credentials, params: body }));
    requestConfig.headers = headers;
    try {
        logger(`[wedaRequest] request, request target: ${commonConfig.url}, method: ${requestConfig.method}, action: ${params.action}`);
        const data = await request_1.fetch(commonConfig.url, requestConfig, commonConfig.proxy);
        logger('[wedaRequest] after request, requestId:', data.Response.RequestId, 'raw response:', data);
        if (data.Response.Error) {
            const tcError = new error_1.CloudBaseError(data.Response.Error.Message, {
                action: params.action,
                requestId: data.Response.RequestId,
                code: data.Response.Error.Code,
                original: data.Response.Error
            });
            throw tcError;
        }
        else {
            return data.Response;
        }
    }
    catch (e) {
        // throw e
        if (e.name === 'CloudBaseError') {
            throw e;
        }
        else {
            throw new error_1.CloudBaseError(e.message, {
                action: params.action,
                code: e.code,
                type: e.type
            });
        }
    }
}
exports.wedaRequest = wedaRequest;
function getHeaders(options) {
    const headers = Object.assign(Object.assign({}, (options.headers || {})), { 
        // 'X-URL': options.url,
        'X-SessionToken': options.credentials.sessionToken, Host: url_1.default.parse(options.url).host });
    const second = Math.floor(Date.now() / 1000);
    const { authorization, timestamp } = signature_nodejs_1.sign({
        secretId: options.credentials.secretId,
        secretKey: options.credentials.secretKey,
        method: options.method,
        url: options.url,
        params: options.params,
        headers,
        withSignedParams: false,
        timestamp: second - 1
    });
    headers['X-Authorization'] = authorization;
    headers['X-Signature-Expires'] = 600;
    headers['X-Timestamp'] = timestamp;
    return headers;
}
