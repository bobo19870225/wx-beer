"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchWeda = exports.fetchCloud = void 0;
const cloud_api_1 = require("@cloudbase/cloud-api");
const utils_1 = require("./utils");
const tcb_1 = require("./tcb");
const error_1 = require("./error");
/** 请求云API的默认参数 */
const DEFAULT_CLOUD_OPTIONS = {
    service: 'lowcode',
    version: '2021-01-08',
    // 30s
    timeout: 30000,
    data: {},
    capitalizeDataKey: true,
};
/**
 * 请求云API
 * @param params 配置参数
 */
async function fetchCloud(params) {
    try {
        const { TENCENTCLOUD_SECRETID, TENCENTCLOUD_SECRETKEY, TENCENTCLOUD_SESSIONTOKEN } = (0, tcb_1.getCloudbaseContext)();
        const newOptions = Object.assign({}, DEFAULT_CLOUD_OPTIONS, params);
        const service = cloud_api_1.CloudApiService.getInstance({
            service: newOptions.service,
            version: newOptions.version,
            credential: {
                secretId: TENCENTCLOUD_SECRETID,
                secretKey: TENCENTCLOUD_SECRETKEY,
                token: TENCENTCLOUD_SESSIONTOKEN,
            },
            timeout: newOptions.timeout,
        });
        const resp = await service.request(params.action, newOptions.capitalizeDataKey ? (0, utils_1.capitalizeKey)(newOptions.data) : newOptions.data);
        return resp;
    }
    catch (error) {
        normalizeCloudAPIError(error, { type: 'design', action: params.action });
    }
}
exports.fetchCloud = fetchCloud;
/** 默认参数 */
const DEFAULT_WEDA_OPTIONS = {
    data: {},
    capitalizeDataKey: true,
    requestId: true,
};
/**
 * 请求Weda后台接口
 * @param params 配置参数
 * @param ignoreUser 是否跳过用户信息校验
 */
async function fetchWeda(params, ignoreUser) {
    try {
        let userSource;
        // 忽略用户信息
        //  目前仅获取当前环境的管理员用户id不需要当前用户信息
        if (ignoreUser) {
            userSource = {};
        }
        else {
            userSource = await getAdminUserId();
        }
        const { serviceType } = params;
        const newParams = Object.assign({}, DEFAULT_WEDA_OPTIONS, params, {
            uid: userSource.uid,
            source: userSource.source,
        });
        delete newParams.serviceType;
        const requestId = undefined;
        const envInfo = (0, tcb_1.getCloudbaseContext)();
        let envId = (0, tcb_1.getConfig)('env');
        // 默认值 cloudbase.SYMBOL_CURRENT_ENV 为symbol类型, 在接口传输中会出错
        if (typeof envId !== 'string')
            envId = envInfo.SCF_NAMESPACE;
        const requestParams = Object.assign(Object.assign({}, newParams), { envType: params.envType || (0, tcb_1.getConfig)('envType'), requestId,
            envId, credentials: {
                secretId: envInfo.TENCENTCLOUD_SECRETID,
                secretKey: envInfo.TENCENTCLOUD_SECRETKEY,
                sessionToken: envInfo.TENCENTCLOUD_SESSIONTOKEN,
            }, clientIp: envInfo.TCB_SOURCE_IP || envInfo.WX_CLIENTIP, data: newParams.capitalizeDataKey
                ? (0, utils_1.capitalizeKey)(newParams.data)
                : newParams.data });
        const resp = await (0, cloud_api_1.wedaRequest)(requestParams, {
            serviceType,
            target: (0, tcb_1.getConfig)('wedaTarget'),
            proxy: process.env.WEDA_PROXY,
        });
        return resp;
    }
    catch (error) {
        normalizeCloudAPIError(error, { type: 'runtime', action: params.action });
    }
}
exports.fetchWeda = fetchWeda;
let cachedAdminId;
async function getAdminUserId() {
    if (!cachedAdminId) {
        cachedAdminId = await fetchWeda({
            action: 'DescribeAdministrator',
        }, true).then((res) => {
            var _a;
            if ((_a = res.Data) === null || _a === void 0 ? void 0 : _a.UserId) {
                return res.Data.UserId;
            }
            throw new error_1.TCBError('InnerError', '无法获取管理员账号信息', {
                reason: `unable to get admin Id, original response: ${JSON.stringify(res)}`,
            });
        });
    }
    return {
        uid: cachedAdminId,
        source: 4,
    };
}
/** 标准花错误信息 */
function normalizeCloudAPIError(error, options) {
    const reason = `failed to weda-${options.type} action ${options.action} on env ${(0, tcb_1.getConfig)('wedaTarget') || 'prod'}`;
    if (error.name === 'CloudBaseError') {
        const extraMsg = error.requestId ? ` [requestId]${error.requestId}` : '';
        let errorCode = `InnerError.${error.code || 'Unknown'}`;
        // 已有多层错误码的, 不再加前缀
        if (typeof error.code === 'string' && error.code.split('.').length > 1) {
            errorCode = error.code;
        }
        throw new error_1.TCBError(errorCode, error.original.Message + extraMsg, {
            original: error,
            reason: `${reason}, ${error.original ? JSON.stringify(error.original) : ''} ${extraMsg}`,
        });
    }
    if (error.name === 'TCBError')
        throw error;
    throw new error_1.TCBError('InnerError', `请求微搭后台失败, ${error.message}`, {
        original: error,
        reason: `${reason}, ${error.name} ${error.message}`,
    });
}
