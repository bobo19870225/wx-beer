"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromisePoolService = void 0;
const inversify_1 = require("inversify");
/**
 * todo list:
 *  1. allSettled
 */
class PromisePool {
    constructor(opts) {
        this.limit = opts.limit;
        this.runningNum = 0;
        this.queue = [];
        this.results = [];
        this.lock = false;
    }
    all(promises) {
        if (this.lock) {
            throw new Error('异步并发队列执行中，请等待队列执行完成或重新创建实例');
        }
        this.lock = true;
        return new Promise((resolve, reject) => {
            for (const promise of promises) {
                this.run(promise, resolve, reject);
            }
        });
    }
    run(promise, resolve, reject) {
        // 如果达到并发上限，则入队等待
        if (this.runningNum >= this.limit) {
            this.queue.push(promise);
            return;
        }
        this.runningNum += 1;
        promise()
            .then((res) => {
            this.results.push(res);
            this.runningNum -= 1;
            if (this.queue.length === 0 && this.runningNum === 0) {
                this.lock = false;
                return resolve(this.results);
            }
            if (this.queue.length) {
                this.run(this.queue.shift(), resolve, reject);
            }
        })
            .catch((err) => {
            this.lock = false;
            reject(err);
        });
    }
}
/**
 * 用于异步并发控制
 */
let PromisePoolService = class PromisePoolService {
    all(opts) {
        const pool = new PromisePool({ limit: opts.limit });
        return pool.all(opts.promises);
    }
};
PromisePoolService = __decorate([
    inversify_1.injectable()
], PromisePoolService);
exports.PromisePoolService = PromisePoolService;
