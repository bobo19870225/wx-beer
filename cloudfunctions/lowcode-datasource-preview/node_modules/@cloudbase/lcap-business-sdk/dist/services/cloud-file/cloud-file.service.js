"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudFileService = void 0;
const tcb_service_1 = require("../tcb/tcb.service");
const fs_1 = require("fs");
const inversify_1 = require("inversify");
const axios_1 = __importDefault(require("axios"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("./../../utils");
const config_service_1 = require("../config/config.service");
let CloudFileService = class CloudFileService {
    constructor(tcbService, configService) {
        this.tcbService = tcbService;
        this.configService = configService;
    }
    /**
     * 获取永久文件链接
     */
    async getPermanentLink(params) {
        const { manager: { hosting }, envId } = this.tcbService;
        const tcloudAppId = this.configService.getEnvironmentVariable('TENCENTCLOUD_APPID');
        // 处理永久文件路径
        if (!utils_1.isValidString(params.cloudPath)) {
            throw new Error('请传入合法的 cloudPath 参数');
        }
        const cloudPath = params.cloudPath.startsWith('/')
            ? `/lcap-business-static${params.cloudPath}`
            : `/lcap-business-static/${params.cloudPath}`;
        // 写入到本地临时文件
        const localPath = `/tmp/lcap-b-${utils_1.randomString(8)}`;
        await fs_1.promises.writeFile(localPath, params.content);
        // 上传文件
        await hosting.uploadFiles({
            localPath,
            cloudPath,
        });
        // 本地开发模式下，异步删除临时文件
        if (this.configService.isLocalDev()) {
            fs_1.promises.unlink(localPath);
        }
        return `https://${envId}-${tcloudAppId}.tcloudbaseapp.com${cloudPath}`;
    }
    /**
     * 将云存储的文件传到hosting，并且换取永久链接
     *
     * @param params 参数
     * @param params.fieldId 必填。云存储文件的fieldId
     * @param params.clear 可选。上传后是否清除云存储中的文件，默认为false
     * @param params.cloudPath 可选。上传到hosting的路径，默认为随机值
     * @returns 永久链接
     */
    async uploadCosFileToHosting(params) {
        var _a;
        // 如果传入的 fieldId 为标准 http 链接，直接返回
        if (/^https?:\/\//.test(params.fieldId)) {
            return params.fieldId;
        }
        // 根据 filedId 获取文件临时链接
        const { app } = this.tcbService;
        const { fileList } = await app.getTempFileURL({
            fileList: [params.fieldId],
        });
        const cloudFile = fileList[0];
        if (((_a = cloudFile.code) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) !== 'success') {
            throw new Error(`[${cloudFile.code}]fieldID查询失败`);
        }
        // hosting 存储地址
        let cloudPath = '';
        if (utils_1.isValidString(params.cloudPath)) {
            cloudPath = params.cloudPath;
        }
        else {
            const ext = path_1.default.extname(params.fieldId);
            cloudPath = utils_1.randomString(16) + ext;
        }
        // 获取文件的二进制数据
        const res = await axios_1.default({
            method: 'get',
            url: cloudFile.tempFileURL,
            responseType: 'arraybuffer',
        });
        // 将文件上传到 hosting，换取永久链接
        const hostingFilePath = await this.getPermanentLink({
            content: res.data,
            cloudPath,
        });
        if (params.clear) {
            await app.deleteFile({
                fileList: [params.fieldId],
            });
        }
        return hostingFilePath;
    }
};
CloudFileService = __decorate([
    inversify_1.injectable(),
    __metadata("design:paramtypes", [tcb_service_1.TcbService,
        config_service_1.ConfigService])
], CloudFileService);
exports.CloudFileService = CloudFileService;
