"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigService = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const dotenv_1 = __importDefault(require("dotenv"));
const inversify_1 = require("inversify");
const constants_1 = require("../../constants");
const context_types_1 = require("../context/context.types");
/**
 * .env 文件解析器
 */
class EnvParser {
    constructor() {
        this.loadEnv();
    }
    loadEnv() {
        const envPath = path_1.default.join(process.cwd(), '.env');
        if (!fs_1.default.existsSync(envPath)) {
            this.data = {};
            return;
        }
        const { parsed } = dotenv_1.default.config({ path: envPath });
        this.data = parsed;
    }
}
const envParser = new EnvParser();
/**
 * 加载读取配置（包括命令行变量和配置文件）
 */
let ConfigService = class ConfigService {
    constructor(lcDatasourceCtx) {
        this.envParser = envParser;
        this.lcDatasourceCtx = lcDatasourceCtx;
    }
    /**
     * 获取命令行变量值。本地开发模式下，还会读取.env中声明的变量
     */
    getEnvironmentVariable(key = '') {
        if (this.isLocalDev()) {
            return this.envParser.data[key] || process.env[key];
        }
        return process.env[key];
    }
    /**
     * 判断是否是本地开发模式
     */
    isLocalDev() {
        return this.envParser.data.NODE_ENV === constants_1.ENV_LOCAL_DEV;
    }
    /**
     * 获取微信小程序用户ID，支持共享小程序
     */
    get wxOpenId() {
        var _a, _b, _c, _d;
        return ((_b = (_a = this.lcDatasourceCtx) === null || _a === void 0 ? void 0 : _a.envInfo) === null || _b === void 0 ? void 0 : _b.fromOpenId)
            || ((_d = (_c = this.lcDatasourceCtx) === null || _c === void 0 ? void 0 : _c.envInfo) === null || _d === void 0 ? void 0 : _d.openId);
    }
    /**
     * 获取微信AppID，支持共享小程序
     */
    get wxAppId() {
        var _a, _b, _c, _d;
        return ((_b = (_a = this.lcDatasourceCtx) === null || _a === void 0 ? void 0 : _a.envInfo) === null || _b === void 0 ? void 0 : _b.fromAppId)
            || ((_d = (_c = this.lcDatasourceCtx) === null || _c === void 0 ? void 0 : _c.envInfo) === null || _d === void 0 ? void 0 : _d.appId);
    }
    /**
     * 是否是数据源正式环境
     */
    get isDsOnline() {
        var _a, _b;
        return ((_b = (_a = this.lcDatasourceCtx) === null || _a === void 0 ? void 0 : _a.envInfo) === null || _b === void 0 ? void 0 : _b.isPreview) === false;
    }
    /**
     * 获取微搭环境的应用ID
     */
    get wedaAppId() {
        var _a, _b;
        return ((_b = (_a = this.lcDatasourceCtx) === null || _a === void 0 ? void 0 : _a.env) === null || _b === void 0 ? void 0 : _b.wedaAppId) || '';
    }
};
ConfigService = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(context_types_1.LC_DATASOURCE_CTX_TYPE)),
    __metadata("design:paramtypes", [Object])
], ConfigService);
exports.ConfigService = ConfigService;
