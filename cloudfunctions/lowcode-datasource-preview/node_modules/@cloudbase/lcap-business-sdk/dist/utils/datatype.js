"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidArray = exports.isValidString = exports.checkParams = exports.randomString = exports.inspectLimit = void 0;
const util_1 = require("util");
/**
 * 格式化字符串
 */
function inspectLimit(data, options = { depth: 5, limit: 1000 }) {
    const { depth, limit } = options;
    const result = util_1.inspect(data, false, depth);
    if (result.length > limit) {
        return `${result.slice(0, limit)}...`;
    }
    return result;
}
exports.inspectLimit = inspectLimit;
/**
 * 获取随机字符串
 */
function randomString(length, chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') {
    let result = '';
    for (let i = length; i > 0; --i)
        result += chars[Math.floor(Math.random() * chars.length)];
    return result;
}
exports.randomString = randomString;
/**
 * 使用 Joi 检查+转换数据源参数
 */
function checkParams(params, schema) {
    const validateRes = schema.validate(params);
    if (validateRes.error) {
        throw new Error(`参数错误：${JSON.stringify(validateRes.error.details)}`);
    }
    return validateRes.value;
}
exports.checkParams = checkParams;
/**
 * 是否为有效的字符串
 */
function isValidString(str) {
    return typeof str === 'string' && str.length > 0;
}
exports.isValidString = isValidString;
/**
 * 是否为有效的数组
 */
function isValidArray(arr) {
    return Array.isArray(arr) && arr.length > 0;
}
exports.isValidArray = isValidArray;
