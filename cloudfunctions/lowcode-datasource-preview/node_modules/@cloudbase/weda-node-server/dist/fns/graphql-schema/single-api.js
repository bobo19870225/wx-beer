"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSingleApi = void 0;
const weda_node_sdk_1 = require("@cloudbase/weda-node-sdk");
const params_type_1 = require("./params-type");
const call_datasource_1 = require("../call-datasource");
/**
 * 缓存已有的方法(同一个方法可能在 query/mutation 中重复出现)
 */
const CACHED_API = {};
/**
 * 获取 graphql 方法的描述信息
 * @param datasource 数据源配置
 * @param methodCfg 方法配置, 若为字符串, 则为内置方法
 */
function getSingleApi(datasource, methodCfg) {
    const isBuiltin = typeof methodCfg === 'string';
    // @ts-ignore
    const methodName = isBuiltin ? methodCfg : methodCfg.name;
    const methodKey = getActionKey(datasource, methodName, isBuiltin);
    if (!CACHED_API[methodKey]) {
        CACHED_API[methodKey] = {
            type: (0, params_type_1.getOutParamsType)(datasource, methodCfg),
            args: (0, params_type_1.getInParamsType)(datasource, methodCfg),
            resolve: async (root, args) => {
                const result = await (0, call_datasource_1.callDataSource)({
                    name: datasource.name,
                    methodName,
                    params: isGetList(methodCfg) ? args === null || args === void 0 ? void 0 : args.params : args,
                });
                return result;
            },
        };
    }
    return CACHED_API[methodKey];
}
exports.getSingleApi = getSingleApi;
/**
 * 获取每个方法 内部唯一的Key, 用于缓存
 */
function getActionKey(datasource, methodName, isBuiltin) {
    const standardName = isBuiltin ? (0, weda_node_sdk_1.normalizeBuiltinMethodName)(methodName) : methodName;
    return `${datasource.name}-${standardName}`;
}
function isGetList(method) {
    return method === 'getList' || method === 'wedaGetList';
}
