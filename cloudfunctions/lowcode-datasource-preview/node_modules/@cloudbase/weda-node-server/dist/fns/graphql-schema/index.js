"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRootType = exports.generateSchema = void 0;
const graphql_1 = require("graphql");
const single_api_1 = require("./single-api");
const utils_1 = require("./utils");
function generateSchema(datasources) {
    return new graphql_1.GraphQLSchema({
        query: getRootType('query', datasources),
        mutation: getRootType('mutation', datasources),
    });
}
exports.generateSchema = generateSchema;
function getRootType(type, datasources) {
    (0, utils_1.setDataSources)(datasources);
    return new graphql_1.GraphQLObjectType({
        name: type,
        description: `The root of all ${type}(s)`,
        fields: () => datasources.reduce((acc, datasource) => {
            if (datasource.type === 'database') {
                const defaultMethods = (0, utils_1.getAllBuiltinMethodName)(datasource.schema['x-defaultMethods'])
                    .filter(n => (0, utils_1.isGraphqlActionType)(type, n));
                defaultMethods.forEach((methodName) => {
                    acc[(0, utils_1.getRootFieldName)(datasource.name, methodName)] = (0, single_api_1.getSingleApi)(datasource, methodName);
                });
            }
            if (datasource.methods) {
                datasource.methods.forEach((methodCfg) => {
                    // 过滤掉禁用的以及非当前类型的
                    if (methodCfg.disabled)
                        return;
                    if (!(0, utils_1.isGraphqlActionType)(type, methodCfg))
                        return;
                    acc[(0, utils_1.getRootFieldName)(datasource.name, methodCfg.name)] = (0, single_api_1.getSingleApi)(datasource, methodCfg);
                });
            }
            return acc;
        }, {}),
    });
}
exports.getRootType = getRootType;
