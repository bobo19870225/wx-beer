"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reporter = exports.callDesignApi = exports.callWedaApi = void 0;
/**
 * 公共服务
 */
const weda_node_sdk_1 = require("@cloudbase/weda-node-sdk");
const request_1 = __importDefault(require("request"));
/**
 * 直接调用weda api
 */
function callWedaApi(params, context) {
    const newParams = Object.assign(Object.assign({}, params), { envType: context.env.envType, requestId: true });
    return (0, weda_node_sdk_1.fetchWeda)(newParams);
}
exports.callWedaApi = callWedaApi;
/** 调用weda设计态接口 */
function callDesignApi(params, context) {
    const newParams = Object.assign(Object.assign({}, params), { envType: context.env.envType, requestId: true, serviceType: 'design' });
    return (0, weda_node_sdk_1.fetchWeda)(newParams);
}
exports.callDesignApi = callDesignApi;
/** 上报时允许请求的域名 */
const ALLOWED_DOMAINS = [
    'tamaegis.com',
    'aegis.qq.com',
];
/**
 * 日志上报
 */
function reporter(params) {
    try {
        const { hostname } = new URL(params.url);
        if (!ALLOWED_DOMAINS.includes(hostname)) {
            throw new weda_node_sdk_1.TCBError('UserError.InvalidParams', `不允许向域名${hostname}上报日志`, {
                reason: `hostname ${hostname} not valid/allowed, no log will be reported`,
            });
        }
        const headers = params.headers || params.header || {};
        // eslint-disable-next-line no-param-reassign
        delete params.header;
        return new Promise((resolve, reject) => {
            (0, request_1.default)(Object.assign(Object.assign({}, params), { headers }), (error, response, body) => {
                if (error) {
                    reject(error);
                }
                let data = body || '';
                try {
                    data = JSON.parse(data);
                }
                catch (e) { }
                resolve({
                    cookies: [],
                    data,
                    header: response.headers,
                    statusCode: response.statusCode,
                });
            });
        });
    }
    catch (e) {
        return {
            cookies: [],
            data: '',
            header: {},
            statusCode: 200,
        };
    }
}
exports.reporter = reporter;
