"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserInfo = exports.signIn = void 0;
/**
 * 用户相关的API
 */
const weda_node_sdk_1 = require("@cloudbase/weda-node-sdk");
/**
 * 登录/注册
 *  用户不存在即注册, 存在即直接返
 *
 *  手机号优先使用接口接收到的
 *   否则, 针对云开发用户则尝试使用 用户信息中的phone
 *        微信用户则尝试使用从 context.weixin.phone(cloudID 换取) 中获取
 *  https://tcloud-dev.oa.com/document/product/1505/57131?!preview&!document=1
 * @param params 用户信息
 * @param context 云函数上下文
 * @returns
 */
async function signIn(params, context) {
    var _a;
    const sourceInfo = (0, weda_node_sdk_1.getUserSource)();
    if (!sourceInfo) {
        throw new weda_node_sdk_1.TCBError('UserError.InvalidUser', weda_node_sdk_1.COMMON_ERROR_MESSAGE['UserError.InvalidUser'], {
            reason: 'unable to sign in user to weda due to unable to determine user identity',
        });
    }
    const existingUserInfo = await getUserInfo({}, context);
    if (existingUserInfo)
        return existingUserInfo;
    let userInfo = {};
    // eslint-disable-next-line prefer-const
    let { phone, userType } = params;
    // eslint-disable-next-line no-param-reassign
    delete params.userType;
    if (!phone) {
        // 云开发用户
        if (sourceInfo.source === 1) {
            const endUserInfo = await weda_node_sdk_1.auth.getEndUserInfo(sourceInfo.uid);
            userInfo = endUserInfo.userInfo;
            // @ts-ignore
            phone = userInfo.phone;
        }
        else {
            // 从 weixin cloud id 信息中获取
            if ((_a = context.weixin) === null || _a === void 0 ? void 0 : _a.phone) {
                phone = context.weixin.phone.phoneNumber;
            }
        }
    }
    // 如无手机号, 手动设置为 undefined , 接口调用时即可自动过滤
    if (!phone) {
        phone = undefined;
    }
    /**
     * anonymousUser 匿名用户, internalUser 内部用户
     *    (之前方法注释: 用户类型 1：内部用户；2：外部用户；anonymousUser：匿名用户
     */
    const registerType = userType || (context.env.isAnonymous ? 'anonymousUser' : 'internalUser');
    const response = await (0, weda_node_sdk_1.fetchWeda)({
        action: 'CreateWedaUser',
        data: Object.assign(Object.assign({}, (params || {})), { type: registerType, phone, envId: context.env.envId }),
        requestId: true,
    });
    const wedaId = response.Data;
    if (!Boolean(response.Data)) {
        throw new weda_node_sdk_1.TCBError('InnerError.UserNotCreated', '创建微搭用户失败', {
            reason: `unable to create weda user, original response: ${JSON.stringify(response)}`,
        });
    }
    return Object.assign({}, userInfo, { wedaId });
}
exports.signIn = signIn;
/**
 * 获取用户信息
 *  暂时无需参数
 * 用户不存在则返回 null, 注册的微信用户返回 空对象
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
async function getUserInfo(params, context) {
    const sourceInfo = (0, weda_node_sdk_1.getUserSource)();
    // 无 id 信息
    if (!sourceInfo)
        return null;
    try {
        const wedaUser = await getUserInfoInner();
        // 查询不到用户
        if (!wedaUser)
            return null;
        // 云开发用户则通过云开发API获取用户信息
        if (sourceInfo.source === 1) {
            const { userInfo } = await weda_node_sdk_1.auth.getEndUserInfo(sourceInfo.uid);
            return Object.assign({}, convertTcbUserInfo(userInfo), wedaUser);
        }
        // 小程序用户, 直接返回用户信息
        return wedaUser;
    }
    catch (error) {
        weda_node_sdk_1.logger.log('[getUserInfo] failed to getUserInfo', error);
        return null;
    }
}
exports.getUserInfo = getUserInfo;
async function getUserInfoInner() {
    try {
        // https://tcloud-dev.oa.com/document/product/1505/64326?!preview&!document=1
        const response = await (0, weda_node_sdk_1.fetchWeda)({
            action: 'DescribeWedaUser',
            data: {
                relatedType: 'UserRelatedRole',
            },
        });
        const wedaUser = response.Data;
        if (!wedaUser)
            return null;
        const userInfo = {
            wedaId: wedaUser.UserId,
            relatedRoles: wedaUser.RelatedRoles,
            // 微信openid
            openId: wedaUser.OpenId,
            // 企业微信userid
            wechatUserId: wedaUser.WechatUserId,
        };
        return userInfo;
    }
    catch (error) {
        // 用户不存在
        if (error && error.code === 'InnerError.FailedOperation')
            return null;
        weda_node_sdk_1.logger.log('fallback: calling DescribeWedaUserId due to `DescribeWedaUser` failed');
        const response = await (0, weda_node_sdk_1.fetchWeda)({
            action: 'DescribeWedaUserId',
        });
        const wedaId = response.Data;
        if (!wedaId || wedaId === '0')
            return null;
        return {
            wedaId,
        };
    }
}
/**
 * 转换云开发[用户信息](https://docs.cloudbase.net/api-reference/server/node-sdk/auth.html#getenduserinfo)
 *  目前仅转换性别信息(从字符串转换为数字), 使其与[微信用户信息一致](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/UserInfo.html)
 */
function convertTcbUserInfo(userInfo) {
    if (!userInfo)
        return userInfo;
    const genderMap = { unknown: 0, male: 1, female: 2 };
    const gender = String(userInfo.gender).toLowerCase();
    // @ts-ignore
    return Object.assign({}, userInfo, { gender: genderMap[gender] || 0 });
}
