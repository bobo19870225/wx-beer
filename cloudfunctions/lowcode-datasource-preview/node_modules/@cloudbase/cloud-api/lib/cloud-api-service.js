"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = __importDefault(require("crypto"));
const url_1 = require("url");
const query_string_1 = __importDefault(require("query-string"));
const request_1 = require("./request");
const error_1 = require("./error");
function isObject(x) {
    return typeof x === 'object' && !Array.isArray(x) && x !== null;
}
// 移除对象中的空值，防止调用云 API 失败
function deepRemoveVoid(obj) {
    if (Array.isArray(obj)) {
        return obj.map(deepRemoveVoid);
    }
    else if (isObject(obj)) {
        let result = {};
        for (const key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                const value = obj[key];
                if (typeof value !== 'undefined' && value !== null) {
                    result[key] = deepRemoveVoid(value);
                }
            }
        }
        return result;
    }
    else {
        return obj;
    }
}
function sha256(message, secret, encoding) {
    const hmac = crypto_1.default.createHmac('sha256', secret);
    return hmac.update(message).digest(encoding);
}
function getHash(message) {
    const hash = crypto_1.default.createHash('sha256');
    return hash.update(message).digest('hex');
}
function getDate(timestamp) {
    const date = new Date(timestamp * 1000);
    const year = date.getUTCFullYear();
    const month = ('0' + (date.getUTCMonth() + 1)).slice(-2);
    // UTC 日期，非本地时间
    const day = ('0' + date.getUTCDate()).slice(-2);
    return `${year}-${month}-${day}`;
}
const ServiceVersionMap = {
    tcb: '2018-06-08',
    scf: '2018-04-16',
    flexdb: '2018-11-27',
    cam: '2019-01-16',
    vpc: '2017-03-12',
    ssl: '2019-12-05'
};
exports.fetch = request_1.fetch;
exports.fetchStream = request_1.fetchStream;
exports.nodeFetch = request_1.nodeFetch;
// token 将在 n 分钟内过期
const isTokenExpired = (credential, gap = 120) => credential.tokenExpired && Number(credential.tokenExpired) < Date.now() + gap * 1000;
class CloudApiService {
    constructor(options) {
        if (!options) {
            throw new error_1.CloudBaseError('Options cloud not be empty!');
        }
        const { service, baseParams, version, proxy, region, credential, getCredential, timeout = 60000 } = options;
        this.service = service;
        this.timeout = timeout;
        if (this.service === 'tcb' && process.env.CLOUDBASE_TCB_CLOUDAPI_PROXY) {
            this.proxy = process.env.CLOUDBASE_TCB_CLOUDAPI_PROXY;
        }
        else {
            this.proxy = proxy;
        }
        if (this.service === 'tcb' && process.env.CLOUDBASE_TCB_CLOUDAPI_REGION) {
            this.region = process.env.CLOUDBASE_TCB_CLOUDAPI_REGION;
        }
        else {
            this.region = region || process.env.TENCENTCLOUD_REGION || 'ap-shanghai';
        }
        this.credential = credential;
        this.baseParams = baseParams || {};
        this.getCredential = getCredential;
        this.version = ServiceVersionMap[service] || version;
    }
    static getInstance(options) {
        var _a;
        const { service } = options;
        if ((_a = CloudApiService.serviceCacheMap) === null || _a === void 0 ? void 0 : _a[service]) {
            return CloudApiService.serviceCacheMap[service];
        }
        const apiService = new CloudApiService(options);
        // 预防 serviceCacheMap 被置空导致的错误
        CloudApiService.serviceCacheMap = Object.assign({}, CloudApiService.serviceCacheMap);
        CloudApiService.serviceCacheMap[service] = apiService;
        return apiService;
    }
    get baseUrl() {
        const urlMap = {
            tcb: 'https://tcb.tencentcloudapi.com',
            flexdb: 'https://flexdb.tencentcloudapi.com',
        };
        if (this.service === 'tcb' && process.env.CLOUDBASE_TCB_CLOUDAPI_HOST) {
            return `http://${process.env.CLOUDBASE_TCB_CLOUDAPI_HOST}`;
        }
        if (urlMap[this.service]) {
            return urlMap[this.service];
        }
        else {
            return `https://${this.service}.tencentcloudapi.com`;
        }
    }
    async request(actionOrOptions, assignData = {}, assignMethod = 'POST') {
        var _a;
        // 增加 region 参数，兼容之前的入参形式
        let action;
        let data;
        let method;
        let region;
        if (typeof actionOrOptions === 'string') {
            action = actionOrOptions;
            data = assignData;
            method = assignMethod;
        }
        else {
            action = actionOrOptions === null || actionOrOptions === void 0 ? void 0 : actionOrOptions.action;
            data = (actionOrOptions === null || actionOrOptions === void 0 ? void 0 : actionOrOptions.data) || {};
            method = (actionOrOptions === null || actionOrOptions === void 0 ? void 0 : actionOrOptions.method) || 'POST';
            region = actionOrOptions === null || actionOrOptions === void 0 ? void 0 : actionOrOptions.region;
        }
        this.action = action;
        this.data = deepRemoveVoid(Object.assign(Object.assign({}, data), this.baseParams));
        this.method = method;
        this.url = this.baseUrl;
        // 不存在密钥，或临时密钥过期
        if (!((_a = this.credential) === null || _a === void 0 ? void 0 : _a.secretId) || isTokenExpired(this.credential)) {
            if (!this.getCredential) {
                throw new error_1.CloudBaseError('You must provide credential info!');
            }
            if (typeof this.getCredential !== 'function') {
                throw new error_1.CloudBaseError('The getCredential option must be a function!');
            }
            const credential = await this.getCredential();
            if (!credential) {
                throw new error_1.CloudBaseError('Calling getCredential function get no credential info!');
            }
            this.credential = credential;
        }
        try {
            const data = await this.requestWithSign(region);
            if (data.Response.Error) {
                const tcError = new error_1.CloudBaseError(data.Response.Error.Message, {
                    action,
                    requestId: data.Response.RequestId,
                    code: data.Response.Error.Code,
                    original: data.Response.Error
                });
                throw tcError;
            }
            else {
                return data.Response;
            }
        }
        catch (e) {
            // throw e
            if (e.name === 'CloudBaseError') {
                throw e;
            }
            else {
                throw new error_1.CloudBaseError(e.message, {
                    action,
                    code: e.code,
                    type: e.type
                });
            }
        }
    }
    async requestWithSign(region) {
        // data 中可能带有 readStream，由于需要计算整个 body 的 hash，
        // 所以这里把 readStream 转为 Buffer
        // await convertReadStreamToBuffer(data)
        const timestamp = Math.floor(Date.now() / 1000);
        const { method, timeout, data } = this;
        if (method === 'GET') {
            this.url += '?' + query_string_1.default.stringify(data);
        }
        if (method === 'POST') {
            this.payload = data;
        }
        const { CLOUDBASE_TCB_CLOUDAPI_HOST } = process.env;
        if (this.service === 'tcb' && CLOUDBASE_TCB_CLOUDAPI_HOST) {
            this.host = CLOUDBASE_TCB_CLOUDAPI_HOST;
        }
        else {
            this.host = new url_1.URL(this.url).host;
        }
        const config = {
            method,
            timeout,
            headers: {
                Host: this.host,
                'X-TC-Action': this.action,
                'X-TC-Region': region || this.region,
                'X-TC-Timestamp': timestamp,
                'X-TC-Version': this.version
            }
        };
        if (this.credential.token) {
            config.headers['X-TC-Token'] = this.credential.token;
        }
        if (method === 'GET') {
            config.headers['Content-Type'] = 'application/x-www-form-urlencoded';
        }
        if (method === 'POST') {
            config.body = JSON.stringify(data);
            config.headers['Content-Type'] = 'application/json';
        }
        const sign = this.getRequestSign(timestamp);
        config.headers['Authorization'] = sign;
        return exports.fetch(this.url, config, this.proxy);
    }
    getRequestSign(timestamp) {
        const { method, url, service } = this;
        const { secretId, secretKey } = this.credential;
        const urlObj = new url_1.URL(url);
        // 通用头部
        let headers = '';
        const signedHeaders = 'content-type;host';
        if (method === 'GET') {
            headers = 'content-type:application/x-www-form-urlencoded\n';
        }
        if (method === 'POST') {
            headers = 'content-type:application/json\n';
        }
        let path = urlObj.pathname;
        if (path === '/api/v1/cliapi' && service === 'lowcode') {
            path = '//lcap.cloud.tencent.com/api/v1/cliapi';
            headers += `host:lcap.cloud.tencent.com\n`;
        }
        else {
            headers += `host:${this.host}\n`;
        }
        const querystring = urlObj.search.slice(1);
        const payloadHash = this.payload ? getHash(JSON.stringify(this.payload)) : getHash('');
        const canonicalRequest = `${method}\n${path}\n${querystring}\n${headers}\n${signedHeaders}\n${payloadHash}`;
        const date = getDate(timestamp);
        const StringToSign = `TC3-HMAC-SHA256\n${timestamp}\n${date}/${service}/tc3_request\n${getHash(canonicalRequest)}`;
        const kDate = sha256(date, `TC3${secretKey}`);
        const kService = sha256(service, kDate);
        const kSigning = sha256('tc3_request', kService);
        const signature = sha256(StringToSign, kSigning, 'hex');
        return `TC3-HMAC-SHA256 Credential=${secretId}/${date}/${service}/tc3_request, SignedHeaders=${signedHeaders}, Signature=${signature}`;
    }
    clearCredentialCache() {
        this.credential = null;
    }
}
exports.CloudApiService = CloudApiService;
// 缓存请求实例
CloudApiService.serviceCacheMap = {};
