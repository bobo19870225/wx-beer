import { cloudbase } from './cloudbase'

/**
 * isInvokeByServerSide - 是否调用自服务端 即上一跳是用户自己服务器，包括云函数
 * @param source
 * @returns
 */
export function isInvokeByServerSide(source = '') {
  const { SOURCE } = cloudbase.getWXContext()
  const invokeSource = source || SOURCE || ''

  // ,not_scf server -> scf
  // ,not_scf client -> server -> scf
  // ,scf     client -> scf    -> scf
  // ,scf     server -> scf
  // ,scf     server -> scf    -> scf
  return invokeSource.includes(',')
}

/**
 * isInvokeByCloudFunction - 是否调自云函数 即上一跳是云函数
 * @param source
 * @returns
 */
export function isInvokeByCloudFunction(source = '') {
  const { SOURCE } = cloudbase.getWXContext()
  const invokeSource = source || SOURCE || ''
  return invokeSource && invokeSource.endsWith(',scf')
}

/**
 * checkInvokePermission - 检查调用权限
 * @param source
 * @returns
 */
export function checkInvokePermission(source: string | undefined): boolean {
  // 自定义接口配置时第二步检测接口海鲜时，来源时为 undefined
  const isFromConsoleInvoke = source === undefined
  // 只允许来自云函数/延迟任务的调用，例如以下来源
  // https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/utils/Cloud.getWXContext.html#%E8%BF%94%E5%9B%9E%E5%80%BC
  // wx_client,scf wx_client,scf,scf   wx_delaytask
  return (isInvokeByServerSide(source)) || source === 'wx_delaytask' || isFromConsoleInvoke
}

const kErrorCodes = {
  PERMISSION_DENIED: 'PERMISSION_DENIED',

  METHOD_NOT_FOUND: 'METHOD_NOT_FOUND',
  METHOD_NOT_FUNCTION: 'METHOD_NOT_FUNCTION',
  METHOD_EXEC_FAILURE: 'METHOD_EXEC_FAILURE',

  UNKNOWN_ERROR: 'UNKNOWN_ERROR',
}

/**
 * 解析出参数
 * @param { object } event - 入参对象
 * @param { string } event.methodName - 具体的接口名，对应于api目录下的文件名，例如，打卡签到模块的自定义接口methodName的枚举值为：sendIntegral、sendPrize
 * @param { object } event.data - 自定义接口的入参
 * @param { object } context - 请求的上下文对象
 * @returns { object } - 返回指定出参对象，必须按下面出参返回
 * @returns { number } code 返回的状态标记，成功返回0， 非0代表错误
 * @returns { string } [msg]  如果成功，则可以不返回，如果失败把相应的错误原因中文描述放在这里
 */
export async function callSelfDefinedMethod(event: any, context: any): Promise<any> {
  const result = await doCallSelfDefinedMethod(event, context)
  console.log('CallSelfDefinedMethodResult:', result)
  return result
}

async function doCallSelfDefinedMethod(event: any, context: any): Promise<any> {
  const { ENV, SOURCE } = cloudbase.getWXContext()
  const { methodName, params } = event

  console.log(`[callSelfDefinedMethod]当前环境：${ENV}，调用来源：${SOURCE}，调用方法：${methodName}，入参：${JSON.stringify(params)}`)

  if (!checkInvokePermission(SOURCE)) {
    return {
      code: kErrorCodes.PERMISSION_DENIED,
      msg: `无权限调用 ${methodName}`,
    }
  }

  try {
    /* eslint-disable @typescript-eslint/no-require-imports */
    // 根据自定义接口名，自动路由到 api 目录下的文件实现
    const path = require('path')
    const m = require(path.join(process.cwd(), 'api', methodName))

    let fn = null
    if (typeof m === 'function') {
      fn = m
    } else if (typeof m.default === 'function') {
      fn = m.default
    }

    if (typeof fn !== 'function') {
      return {
        code: kErrorCodes.METHOD_NOT_FUNCTION,
        msg: `自定义方法 ${methodName} 不是一个函数`,
      }
    }

    try {
      return await fn(params, context)
    } catch (e) {
      return {
        code: kErrorCodes.METHOD_EXEC_FAILURE,
        msg: `自定义方法 ${methodName} 执行异常：${e.message}`,
        e,
      }
    }
  } catch (e) {
    if (e.code === 'MODULE_NOT_FOUND') {
      return {
        code: kErrorCodes.METHOD_NOT_FOUND,
        msg: `自定义方法 ${methodName} 不存在：${e.message}`,
        e,
      }
    }

    return {
      code: kErrorCodes.UNKNOWN_ERROR,
      msg: `未知错误：${e.message}`,
      e,
    }
  }
}
