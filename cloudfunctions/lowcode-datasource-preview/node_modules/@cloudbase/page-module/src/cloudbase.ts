
import { identifyRuntimeEnv, RuntimeEnv, checkNodeModuleDependencies } from './utils'

const kBaseSdk = 'wx-server-sdk'

export interface IKeyValue {
  [key: string]: any
}

export interface ICredentialsInfo {
  private_key_id: string
  private_key: string
  env_id?: string
}

export interface IInitCloudbaseInstanceForNodejsOptions {
  debug?: boolean
  timeout?: number
  isHttp?: boolean
  secretId?: string
  secretKey?: string
  envName?: string | Symbol
  region?: string
  env?: string | Symbol
  sessionToken?: string
  serviceUrl?: string
  headers?: any
  proxy?: string
  version?: string
  credentials?: ICredentialsInfo
  throwOnCode?: boolean // 错误回包(带code) throw
  keepalive?: boolean // 是否开启keep alive
}

const kRuntimeEnv = identifyRuntimeEnv()

export interface IAddDelayedCallMethodTaskOptions {
  env: string
  functionName: string
  delayTime: number
  data: any
}

/* eslint-disable max-len */
export function initCloudbaseInstanceForNodejs(env: string, options: IInitCloudbaseInstanceForNodejsOptions = {}) {
  checkNodeModuleDependencies(kBaseSdk)
  /* eslint-disable @typescript-eslint/no-require-imports */
  const cloud = require(kBaseSdk)
  const cloudInstance = cloud.createNewInstance({
    ...options,
    env,
  })
  return cloudInstance
}

export function initCloudbaseInstanceForNodejsForCurrentEnv() {
  if (kRuntimeEnv === RuntimeEnv.NODEJS) {
    checkNodeModuleDependencies(kBaseSdk)
    /* eslint-disable @typescript-eslint/no-require-imports */
    const cloud = require(kBaseSdk)
    return initCloudbaseInstanceForNodejs(cloud.getWXContext().ENV)
  }
  return null
}

export const cloudbase = initCloudbaseInstanceForNodejsForCurrentEnv()

export interface IInitCloudbaseInstanceForWxClientOptions {
  traceUser?: boolean
}

export function initCloudbaseInstanceForWxClient(env: string, options: IInitCloudbaseInstanceForWxClientOptions = {}) {
  // 微信小程序环境
  const cloudInstance = new wx.cloud.Cloud({
    resourceEnv: env,
  })
  cloudInstance.init(options)
  return cloudInstance
}

export interface IInitCloudbaseInstanceOptions
  extends IInitCloudbaseInstanceForNodejsOptions, IInitCloudbaseInstanceForWxClientOptions {
}

export function initCloudbaseInstance(env: string, options: IInitCloudbaseInstanceOptions = {}) {
  if (kRuntimeEnv === RuntimeEnv.NODEJS) {
    return initCloudbaseInstanceForNodejs(env, options)
  }
  if (kRuntimeEnv === RuntimeEnv.WX_CLIENT) {
    return initCloudbaseInstanceForWxClient(env, options)
  }

  /* eslint-disable max-len */
  throw new Error('[ERROR] Unknown runtime environment, please use in Node.js or WX_CLIENT environment')
}
