"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatHttpMethodConfig = exports.convertHttpField2JsonTpl = void 0;
/**
 * 将HTTP中的 IHttpField 转换为JSON模版
 */
function convertHttpField2JsonTpl(field) {
    if (!field)
        return;
    if (typeof field.value !== 'undefined') {
        return field.value;
    }
    const result = field.type === 'array' ? [] : {};
    if (field.items) {
        field.items.forEach((item) => {
            const currentVal = convertHttpField2JsonTpl(item);
            const key = item.key;
            if (typeof result[key] === 'undefined') {
                result[key] = currentVal;
            }
            else {
                // 同一个key出现多次, 即字段值为数组情况
                if (!Array.isArray(result[key])) {
                    result[key] = [result[key]];
                }
                result[key].push(currentVal);
            }
        });
    }
    return result;
}
exports.convertHttpField2JsonTpl = convertHttpField2JsonTpl;
/**
 * 将 http method 配置中的 header、query、body 中的value 使用 normalizeHttpConfigValues 处理
 *  以方便实际运行时使用
 */
function formatHttpMethodConfig(methodConfig) {
    if (methodConfig.type !== 'http')
        return methodConfig;
    const { calleeBody } = methodConfig;
    const formatValue = (part) => {
        if (!part)
            return;
        return Object.assign({}, part, {
            values: convertHttpField2JsonTpl(part.values),
        });
    };
    const newCalleeBody = Object.assign({}, calleeBody, {
        header: formatValue(calleeBody.header),
        query: formatValue(calleeBody.query),
        body: formatValue(calleeBody.body),
    });
    return Object.assign({}, methodConfig, {
        calleeBody: Object.assign({}, calleeBody, newCalleeBody),
    });
}
exports.formatHttpMethodConfig = formatHttpMethodConfig;
