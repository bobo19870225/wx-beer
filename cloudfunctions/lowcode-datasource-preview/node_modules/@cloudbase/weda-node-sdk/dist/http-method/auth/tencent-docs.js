"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.provider = exports.getAuthData = void 0;
/**
 * 腾讯文档
 * https://docs.qq.com/open/wiki/OPENAPI.html
 */
const node_fetch_1 = __importDefault(require("node-fetch"));
const utils_1 = require("./utils");
const common_1 = require("../../common");
async function getAuthData(dsId, requestConfig) {
    const dsToken = await (0, utils_1.getToken)(dsId);
    const authInfo = dsToken === null || dsToken === void 0 ? void 0 : dsToken.QQDocsToken;
    if (!authInfo || !authInfo.AccessToken) {
        throw new common_1.TCBError('FnError.HTTP.TokenNotAvailable', `无法获取数据源${dsId}对应的腾讯文档Token信息`, {
            reason: `unable to get Tencent Docs token of datasource ${dsId}`,
        });
    }
    const headers = {
        'Access-Token': authInfo.AccessToken,
        'Client-Id': authInfo.ClientId,
        'Open-Id': authInfo.OpenId,
    };
    // 自动将API地址中 encodedID 转换为接口可用的的 fileID
    const uri = await normalizeUri(requestConfig.uri, headers);
    return {
        authInfo,
        uri,
        headers,
    };
}
exports.getAuthData = getAuthData;
/**
 * 将URI中的 encodedID 替换为 fileId
 */
async function normalizeUri(uri, headers) {
    const urlObj = new URL(uri);
    const { pathname } = urlObj;
    const encodedIdDriveReg = /(?<=\/openapi\/drive\/v2\/files\/)([a-zA-Z\d]+)\b/;
    const encodedIdSheetRegs = [/(?<=\/openapi\/sheetbook\/v2\/)([a-zA-Z\d]+)\b/, /(?<=\/openapi\/spreadsheet\/v3\/files\/)([a-zA-Z\d]+)\b/]; // 这里对应v2和v3两个版本的接口，v2版本接口腾讯文档将于2023-8-1下线
    let matchedId = '';
    let matchedReg;
    if (encodedIdDriveReg.test(pathname)) {
        matchedReg = encodedIdDriveReg;
        matchedId = RegExp.$1;
        // 判断是否为调用腾讯文档sheet的接口, 腾讯文档sheet 接口均需要 bookID，其中数组的两项分别对应腾讯文档v2和v3两个版本接口
    }
    else if ([/\/openapi\/sheetbook\/v2\//, /\/openapi\/spreadsheet\/v3\//].find(item => item.test(pathname))) {
        const sheetReg = encodedIdSheetRegs.find(item => item.test(pathname));
        if (sheetReg) {
            matchedReg = sheetReg;
            matchedId = RegExp.$1;
        }
        else {
            throw new common_1.TCBError('UserError.InvalidParams', '调用腾讯文档表格相关接口失败, 缺少参数 bookID', {
                reason: `missing bookID when calling tencent doc API, actual url: ${uri}`,
            });
        }
    }
    if (!matchedId || !isEncodedID(matchedId))
        return;
    const fileID = await convertEncodedID2FileID(matchedId, headers);
    if (!fileID)
        return;
    urlObj.pathname = pathname.replace(matchedReg, fileID);
    return urlObj.href;
}
function isEncodedID(str) {
    return str.length > 10 && /^[a-z\d]+$/i.test(str);
}
const cachedFileIDMap = {};
/**
 * 将 URL 中的ID 转换为接口层可用的ID
 *  腾讯文档接口各处使用的 bookID/fileID 与文档URL中的ID不一样, 需要转换后方可使用
 * @param encodedID 腾讯文档 encodedID, 即文档URL路径中的 ID 信息:
 *    如 https://docs.qq.com/sheet/DAAAAAAAAAAA 中的 DAAAAAAAAAAA 即为 encodedID
 */
function convertEncodedID2FileID(encodedID, headers) {
    if (cachedFileIDMap[encodedID])
        return Promise.resolve(cachedFileIDMap[encodedID]);
    const qs = new URLSearchParams({
        type: '2',
        value: encodedID,
    });
    return (0, node_fetch_1.default)(`https://docs.qq.com/openapi/drive/v2/util/converter?${qs.toString()}`, {
        headers,
    })
        .then(response => response.json())
        .then((res) => {
        var _a;
        if (res.ret !== 0) {
            throw new common_1.TCBError('FnError.HTTP.TencentDoc.InvalidEncodedID', '调用腾讯文档失败, 无法将参数中的 encodedID 转换为 fileId, 请确认参数是否正确', {
                reason: `unable to convert tencent doc encodedID to fileId: [${res.ret}]${res.msg}`,
            });
        }
        const fileID = (_a = res.data) === null || _a === void 0 ? void 0 : _a.fileID;
        cachedFileIDMap[encodedID] = fileID;
        return fileID;
    });
}
function transformResponse(body, response) {
    var _a, _b;
    if (body.ret)
        throw new common_1.TCBError(`FnError.HTTP.TencentDoc.${body.ret}`, `调用腾讯文档失败[${body.ret}]${body.msg}`);
    return (/\/openapi\/spreadsheet\/v3\//.test((_b = (_a = response === null || response === void 0 ? void 0 : response.request) === null || _a === void 0 ? void 0 : _a.uri) === null || _b === void 0 ? void 0 : _b.pathname) && body) || body.data || { isSuccess: true };
}
exports.provider = {
    getAuthData,
    transformResponse,
};
