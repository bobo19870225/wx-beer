"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertField2Template = void 0;
const common_1 = require("../common");
/**
 * 数据类型是否为简单类型
 * @param dataType 数据类型
 * @returns
 */
function isSimpleType(dataType) {
    return dataType !== 'object' && dataType !== 'array';
}
/**
 * 将 IField 结构转换为 JSON 模版
 *  模版结构可参考 src/ds-helper/json-transform.ts 说明
 * @param field 字段结构描述, 有插值的则需有 keyPath 属性
 */
function convertField2Template(field, fieldName = '', result) {
    const keyPath = field['x-keyPath'];
    if (isSimpleType(field.type)) {
        const val = keyPath ? `{{${keyPath}}}` : field.default;
        if (!fieldName || !result)
            return val;
        result[fieldName] = val;
        return result;
    }
    if (field.type === 'array') {
        if (!result)
            result = {};
        if (keyPath) {
            result[`${fieldName || ''}$${keyPath}$`] = convertField2Template(field.items);
        }
        else {
            // 无映射, 数组无需映射, 成员默认使用数组包裹
            result[`${fieldName || ''}`] = [convertField2Template(field.items)];
        }
    }
    else if (field.type === 'object') {
        let child = {};
        if (!result) {
            result = {};
            child = result;
        }
        else {
            result[fieldName] = {};
            child = result[fieldName];
        }
        if (!field.properties)
            return result;
        Object.keys(field.properties).forEach((k) => {
            convertField2Template(field.properties[k], k, child);
        });
    }
    else {
        common_1.logger.warn('convertField2Template - unsupported filed type', field.type);
    }
    return result;
}
exports.convertField2Template = convertField2Template;
