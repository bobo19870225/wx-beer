"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.callHttpMethod = void 0;
const send_request_1 = require("./send-request");
const json_transform_1 = require("./json-transform");
const field_2_template_1 = require("./field-2-template");
const common_1 = require("../common");
const http_via_backend_1 = require("./http-via-backend");
/**
 * 调用HTTP方法
 */
function callHttpMethod(params, context) {
    // is not test and not builtin http method
    if (!params.isTestMode
        && !params.useLegacy
        && params.dataSource
        && (!context.httpAuth || !context.httpAuth.getAuthData)) {
        return (0, http_via_backend_1.httpViaBackend)(params, context);
    }
    return (0, send_request_1.sendRequest)(params.dataSource, params.methodCfg, context, params.params || {})
        .then(async ({ response, body }) => {
        var _a;
        const bodyType = typeof body;
        let parsedBody;
        if (bodyType === 'object') {
            parsedBody = body;
        }
        else if (bodyType === 'string') {
            try {
                // @ts-ignore
                parsedBody = JSON.parse(body);
            }
            catch (error) {
                throw new common_1.TCBError('UserError.HTTP.InvalidResponse', '第三方接口返回的内容不是合法的JSON字符串', {
                    reason: `invalid response body, expect a json string: ${body}`,
                    original: error,
                });
            }
        }
        else {
            throw new common_1.TCBError('UserError.HTTP.InvalidResponse', `无法处理第三方接口返回的数据类型 ${bodyType}`, {
                reason: `unsupported response body type ${bodyType}`,
            });
        }
        if ((_a = context.httpAuth) === null || _a === void 0 ? void 0 : _a.transformResponse) {
            parsedBody = await context.httpAuth.transformResponse(parsedBody, response);
            response.body = parsedBody;
        }
        if (params.isTestMode) {
            return { response, body: parsedBody };
        }
        try {
            const paramsTpl = (0, field_2_template_1.convertField2Template)(params.methodCfg.outParams);
            const result = (0, json_transform_1.transformJSONWithTemplate)(parsedBody, paramsTpl);
            return result;
        }
        catch (error) {
            throw new common_1.TCBError('FnError.HTTP.MalformedResponse', `无法将第三方接口返回的数据转换为该数据源方法出参对应的结构: ${error.message}`, {
                reason: `failed to map origin response to method ${params.methodName}'s outParams specified structure, ${error.message}`,
                original: error,
            });
        }
    });
}
exports.callHttpMethod = callHttpMethod;
