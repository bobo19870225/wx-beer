"use strict";
/**
 * 处理数据源入参的默认值
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.standardizeParams = void 0;
/**
 * 根据JSON Schema 中描述的默认值填充用户参数中缺失的值
 * @param params 用户提交的参数
 * @param paramsSchema 参数对应的JSON Schema
 */
function standardizeParams(params, paramsSchema) {
    if (!paramsSchema || !hasDefaultValue(paramsSchema))
        return params;
    const defaultValue = getDefaultValue(paramsSchema);
    if (!defaultValue)
        return params;
    return mergeDefaults(defaultValue, params);
}
exports.standardizeParams = standardizeParams;
// 判断JSON Schema 中是否有默认值
function hasDefaultValue(schema) {
    if (!schema)
        return false;
    if (!isComplexType(schema.type) && typeof schema.default === 'undefined')
        return false;
    if (typeof getValue(schema.default, schema.type) !== 'undefined')
        return true;
    if (schema.type === 'array')
        return hasDefaultValue(schema.items);
    if (schema.type === 'object') {
        if (!schema.properties || !Object.keys(schema.properties).length)
            return false;
        return Object.values(schema.properties).some(item => hasDefaultValue(item));
    }
    return false;
}
/**
 * 根据参数的JSONSchema 提取其中的默认值
 *
 * @param schema 参数的JSON Schema
 * @returns
 */
function getDefaultValue(schema, key) {
    const { type } = schema;
    const value = getValue(schema.default, type);
    if (!isUndefined(value))
        return { default: value, type: schema.type, key };
    if (type === 'array') {
        const itemSchema = schema.items;
        if (!itemSchema)
            return;
        const itemDftValue = getValue(itemSchema.default, itemSchema.type);
        if (!isUndefined(itemDftValue)) {
            return { type, key, children: { type: itemSchema.type, default: itemDftValue } };
        }
        const v = getDefaultValue(itemSchema);
        if (isUndefined(v))
            return;
        return { type: 'array', children: v, key };
    }
    if (type === 'object') {
        if (!schema.properties)
            return;
        const keys = Object.keys(schema.properties);
        if (!keys.length)
            return;
        const result = [];
        keys.forEach((k) => {
            const propSchema = schema.properties[k];
            const v = getDefaultValue(propSchema, k);
            if (isUndefined(v))
                return;
            result.push(v);
        });
        if (!Object.keys(result).length)
            return;
        return { children: result, type: schema.type, key };
    }
}
/**
 * 将默认值合并进用户参数
 * @param defaultValue 默认值对象
 * @param userValue 用户参数
 * @returns
 */
function mergeDefaults(defaultValue, userValue) {
    const usrType = getType(userValue);
    // 用户有传值且 (值为简单值或类型与默认值类型不匹配), 直接使用用户值
    if (usrType !== 'undefined' && (!isComplexType(usrType) || defaultValue.type !== usrType))
        return userValue;
    // 用户值为空
    if (usrType === 'undefined') {
        if (!isUndefined(defaultValue.default))
            return defaultValue.default;
        return;
    }
    if (defaultValue.type === 'array' && defaultValue.children) {
        // @ts-ignore
        return userValue.map(item => mergeDefaults(defaultValue.children, item));
    }
    if (defaultValue.type === 'object' && defaultValue.children) {
        defaultValue.children.forEach((item) => {
            // @ts-ignore
            const value = mergeDefaults(item, userValue[item.key]);
            if (isUndefined(value))
                return;
            // @ts-ignore
            userValue[item.key] = value;
        });
        return userValue;
    }
}
/**
 * 根据类型 type 转换 value, 将其转换为对应类型的值, 若无法成功转换者返回undefined
 * @param value 值
 * @param type 类型
 */
function getValue(value, type) {
    const valueType = getType(value);
    if (type === valueType)
        return value;
    switch (type) {
        // @ts-ignore
        case 'undefined': return;
        case 'string': return JSON.stringify(value);
        case 'number':
            if (value === '')
                return;
            const v = Number(value);
            return isNaN(v) ? undefined : v;
        case 'boolean':
            if (valueType === 'string') {
                if (!value)
                    return;
                return value !== 'false';
            }
            return !!value;
        case 'object':
            if (valueType === 'string') {
                try {
                    const v = JSON.parse(value);
                    return typeof v === 'object' ? v : undefined;
                }
                catch (e) {
                    return;
                }
            }
            return;
        case 'array':
            if (Array.isArray(value))
                return value;
            if (valueType === 'string') {
                try {
                    const v = JSON.parse(value);
                    return Array.isArray(v) ? v : undefined;
                }
                catch (error) {
                    return;
                }
            }
            return;
    }
}
/**
 * 是否为复杂类型
 * @param type 类型名称
 */
function isComplexType(type) {
    return type === 'object' || type === 'array';
}
/**
 * 获取字段类型, 针对array 特殊处理
 */
function getType(v) {
    const type = typeof v;
    return type === 'object' && Array.isArray(v) ? 'array' : type;
}
function isUndefined(v) {
    return typeof v === 'undefined';
}
