"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMethodOutParams = exports.getMethodInParams = void 0;
const database_1 = require("./database");
const helper_1 = require("../helper");
__exportStar(require("./database"), exports);
/**
 * 获取数据源方法入参数结构, 如果找不到对应方法, 将抛出错误
 * @param silent 为true 则不抛出错误, 返回undefined
*/
function getMethodInParams(datasource, methodName, silent) {
    try {
        if (datasource.type === 'database' && (0, helper_1.isBuiltinMethodName)(methodName)) {
            return (0, database_1.getDbInParams)(datasource.schema, methodName);
        }
        const method = datasource.methods.find(m => m.name === methodName);
        if (!method) {
            throw new Error(`can not find method ${methodName} in datasource ${datasource.name}`);
        }
        return method.inParams;
    }
    catch (e) {
        if (silent)
            return;
        throw e;
    }
}
exports.getMethodInParams = getMethodInParams;
/**
 * 获取数据源方法出参的结构, 如果找不到对应方法, 将抛出错误
 */
function getMethodOutParams(datasource, methodName, silent) {
    try {
        if (datasource.type === 'database' && (0, helper_1.isBuiltinMethodName)(methodName)) {
            return (0, database_1.getDbOutParams)(datasource.schema, methodName);
        }
        const method = datasource.methods.find(m => m.name === methodName);
        if (!method) {
            throw new Error(`can not find method ${methodName} in datasource ${datasource.name}`);
        }
        return method.outParams;
    }
    catch (e) {
        if (silent)
            return;
        throw e;
    }
}
exports.getMethodOutParams = getMethodOutParams;
