"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDbOutParams = exports.resortPropIndexes = exports.getDbInParams = exports.filterSchema = exports.LEGACY_METHOD_NAMES = exports.INNER_FIELD_NAMES = void 0;
const lodash_1 = __importDefault(require("lodash"));
/** 数据源内置字段  */
exports.INNER_FIELD_NAMES = [
    'createdAt', 'updatedAt', '_id',
    'updateBy', 'createBy', 'owner',
    '_departmentList',
];
/** 旧的内置方法名称 */
exports.LEGACY_METHOD_NAMES = ['getRecords', 'getList', 'getItem', 'delete', 'create', 'update'];
function normalizeMethodName(methodName) {
    if (exports.LEGACY_METHOD_NAMES.includes(methodName)) {
        return methodName.replace(/^[a-z]/, $0 => `weda${$0.toUpperCase()}`);
    }
    return methodName;
}
const IN_PARAMS_MAP = {
    wedaGetItem: (schema) => {
        const newSchema = getParamsOnlyHasId(schema);
        const fieldOptions = getEnumOptionsFromSchema(schema);
        newSchema.properties.where = getWhereConditions(fieldOptions);
        return newSchema;
    },
    wedaDelete: getParamsOnlyHasId,
    wedaUpdate: (schema) => Object.assign({}, schema, { properties: getUpdateRecordProperties(schema) }),
    wedaBatchUpdate: (schema) => {
        const fieldOptions = getEnumOptionsFromSchema(schema);
        return Object.assign({}, schema, {
            required: ['record', 'where'],
            properties: {
                record: {
                    title: '更新记录',
                    type: 'object',
                    name: 'record',
                    'x-index': 1,
                    'x-id': 'x2323',
                    'x-required': true,
                    properties: getUpdateRecordProperties(schema),
                },
                where: getWhereConditions(fieldOptions, true),
            },
        });
    },
    wedaCreate: (schema) => Object.assign({}, schema, {
        properties: resortPropIndexes(lodash_1.default.omit(schema.properties, exports.INNER_FIELD_NAMES)),
    }),
    wedaBatchCreate: (schema) => Object.assign({}, schema, {
        properties: {
            records: {
                name: 'records',
                title: '数据内容',
                type: 'array',
                'x-index': 1,
                'x-id': 'sw323',
                items: {
                    type: 'object',
                    properties: resortPropIndexes(lodash_1.default.omit(schema.properties, exports.INNER_FIELD_NAMES)),
                },
            },
        },
    }),
    wedaGetList: (schema) => Object.assign({}, schema, { properties: {} }),
    wedaGetRecords: getDbGetRecordsInParams,
    wedaBatchDelete: (schema) => {
        const fieldOptions = getEnumOptionsFromSchema(schema);
        return Object.assign({}, schema, {
            properties: { where: getWhereConditions(fieldOptions) },
        });
    },
};
function getParamsOnlyHasId(schema) {
    return Object.assign({}, schema, { properties: lodash_1.default.pick(schema.properties, ['_id']) });
}
function getUpdateRecordProperties(schema) {
    const clonedField = lodash_1.default.cloneDeep(schema);
    return resortPropIndexes(lodash_1.default.omit(clonedField.properties, exports.INNER_FIELD_NAMES.filter(key => key !== '_id')));
}
/**
 * @description: 过滤schema中不需要的字段
 * @param {IJsonSchemaObject} schema
 * @param {string[]} filterArr 需要过滤字段的集合
 * @return {*}
 */
function filterSchema(schemaProperties, filterFormatArr) {
    const properties = {};
    Object.keys(schemaProperties || {}).forEach(cur => {
        const item = schemaProperties[cur];
        // @ts-ignore
        if (!(filterFormatArr.includes((item === null || item === void 0 ? void 0 : item.format) || item.type))) {
            properties[cur] = item;
            if (item.type === 'object') {
                // @ts-ignore
                properties[cur].properties = filterSchema(item.properties, filterFormatArr);
            }
            if (item.type === 'array' && item.items.type === 'object') {
                // @ts-ignore
                properties[cur].items = Object.assign(
                // @ts-ignore
                properties[cur].items, { properties: filterSchema(item.items.properties, filterFormatArr) });
            }
        }
    });
    return properties;
}
exports.filterSchema = filterSchema;
/**
 * 获取数据库数据源默认方法的入参
 * @param field 数据库数据源字段结构
 * @param fnName 内置方法名称: getItem getList delete update create
 * @return 目前 fnName 为 getList 时返回为null
 */
function getDbInParams(schema, fnName) {
    const methodName = normalizeMethodName(fnName);
    if (!IN_PARAMS_MAP[methodName])
        throw new Error(`no corresponding in-params for ${fnName}`);
    let clonedField = lodash_1.default.cloneDeep(schema);
    clonedField = lodash_1.default.pick(clonedField, ['x-id', 'type', 'properties', 'additionalProperties', 'required']);
    clonedField.properties = filterSchema(clonedField.properties, ['function']);
    // @ts-ignore
    return IN_PARAMS_MAP[methodName](clonedField);
}
exports.getDbInParams = getDbInParams;
/**
 * 对字段的 properties 的 x-index 进行矫正: 按顺序排列并将 index 从 1 开始计数
 */
function resortPropIndexes(properties) {
    return Object.keys(properties)
        .sort((a, b) => {
        const aIdx = properties[a]['x-index'] || 0;
        const bIdx = properties[b]['x-index'] || 0;
        return aIdx - bIdx;
    })
        .reduce((acc, cur, idx) => {
        const item = properties[cur];
        item['x-index'] = idx + 1;
        acc[cur] = item;
        return acc;
    }, {});
}
exports.resortPropIndexes = resortPropIndexes;
/**
 * 获取查询列表的的入参
 *  参考 packages/template-builder/src/service-template/database.ts 中的 IGetRecordParams 类型定义
 */
function getDbGetRecordsInParams(schema) {
    const fieldOptions = getEnumOptionsFromSchema(schema);
    return {
        title: '入参',
        type: 'object',
        additionalProperties: true,
        required: [],
        properties: {
            pageNo: {
                title: '页码',
                description: '从 1 开始计数',
                type: 'number',
                'x-index': 1,
            },
            pageSize: {
                title: '每页大小',
                type: 'number',
                'x-index': 2,
            },
            orderBy: {
                title: '排序字段名称',
                type: 'string',
                'x-index': 3,
                'x-enumObj': fieldOptions,
            },
            orderType: {
                title: '排序方式',
                type: 'string',
                'x-index': 4,
                'x-enumObj': [
                    { label: '降序', value: 'desc' },
                    { label: '升序', value: 'asc' },
                ],
            },
            where: getWhereConditions(fieldOptions),
        },
    };
}
function getEnumOptionsFromSchema(schema) {
    return Object.keys(schema.properties || {}).map(key => ({
        // @ts-ignore
        label: schema.properties[key].title || schema.properties[key].label || key,
        value: key,
    }));
}
function getWhereConditions(fieldOptions, required) {
    return {
        title: '查询条件',
        type: 'array',
        'x-index': 5,
        'x-required': required || false,
        items: {
            title: '',
            type: 'object',
            required: ['key', 'rel', 'val'],
            additionalProperties: true,
            properties: {
                key: {
                    title: '字段名称',
                    type: 'string',
                    'x-required': true,
                    'x-index': 1,
                    'x-enumObj': fieldOptions,
                },
                rel: {
                    title: '关系',
                    type: 'string',
                    description: '可选值有:\n eq(相等) \nneq(不相等) \nlt(小于) \nlte(小于或等于) \ngt(大于) \ngte(大于或等于) \nsearch(包含文字内容) \nin(匹配指定值) \nnin(不匹配指定值)',
                    'x-required': true,
                    'x-index': 2,
                    'x-enumObj': [
                        { label: '相等', value: 'eq' },
                        { label: '不相等', value: 'neq' },
                        { label: '小于', value: 'lt' },
                        { label: '小于或等于', value: 'lte' },
                        { label: '大于', value: 'gt' },
                        { label: '大于或等于', value: 'gte' },
                        { label: '包含文字内容', value: 'search' },
                        { label: '匹配指定值', value: 'in' },
                        { label: '不匹配指定值', value: 'nin' },
                    ],
                },
                val: {
                    title: '值',
                    description: '值的数据类型应与字段类型相匹配',
                    type: 'string',
                    'x-required': true,
                    'x-index': 3,
                },
            },
        },
    };
}
const OUT_PARAMS_MAP = {
    wedaGetItem: (schema) => schema,
    wedaDelete: (schema) => Object.assign({}, schema, {
        properties: {
            deleted: {
                title: '删除的记录条数',
                type: 'number',
                'x-index': 1,
            },
        }
    }),
    wedaBatchDelete: (schema) => Object.assign({}, schema, {
        properties: {
            deleted: {
                title: '删除的记录条数',
                type: 'number',
                'x-index': 1,
            },
        }
    }),
    wedaUpdate: (schema) => Object.assign({}, schema, {
        properties: {
            updated: {
                title: '更新的记录条数',
                type: 'number',
                'x-index': 1,
            },
        }
    }),
    wedaBatchUpdate: (schema) => Object.assign({}, schema, {
        properties: {
            updated: {
                title: '更新的记录条数',
                type: 'number',
                'x-index': 1,
            },
        }
    }),
    wedaCreate: (schema) => Object.assign({}, schema, {
        properties: {
            _id: {
                title: '新记录的ID',
                type: 'string',
                'x-index': 1,
            },
        },
    }),
    wedaBatchCreate: (schema) => Object.assign({}, schema, {
        properties: {
            ids: {
                title: '记录的 id 数组',
                type: 'array',
                'x-index': 1,
                items: {
                    title: '记录ID',
                    type: 'string',
                },
            },
        },
    }),
    wedaGetList: (schema) => ({ title: '结果列表', type: 'array', items: schema }),
    wedaGetRecords: (schema) => ({
        title: '结果列表',
        type: 'object',
        required: [],
        additionalProperties: true,
        properties: {
            total: {
                title: '记录总条数',
                type: 'number',
                'x-index': 1,
            },
            pageNo: {
                title: '页码',
                type: 'number',
                'x-index': 2,
            },
            pageSize: {
                title: '每页大小',
                type: 'number',
                'x-index': 3,
            },
            records: {
                title: '记录列表',
                type: 'array',
                items: schema,
                'x-index': 4,
            },
        },
    }),
};
/**
 * 获取数据库数据源默认方法的出参
 * @param field 数据库数据源字段结构
 * @param fnName 内置方法名称: getItem getList delete update create
 */
function getDbOutParams(schema, fnName) {
    const methodName = normalizeMethodName(fnName);
    if (!IN_PARAMS_MAP[methodName])
        throw new Error(`no corresponding out-params for ${fnName}`);
    let clonedField = lodash_1.default.cloneDeep(schema);
    clonedField = lodash_1.default.pick(clonedField, ['x-id', 'type', 'properties', 'additionalProperties', 'required']);
    return OUT_PARAMS_MAP[methodName](clonedField);
}
exports.getDbOutParams = getDbOutParams;
