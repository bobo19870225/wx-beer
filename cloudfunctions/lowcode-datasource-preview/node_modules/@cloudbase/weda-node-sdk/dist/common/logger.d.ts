/**
 * 日志常见方法名列表, 级别由低到高
 *  <const> 为了将类型 string[] 转换为 ('trace' | 'debug')[]
 *  refer: https://github.com/microsoft/TypeScript/issues/28046#issuecomment-607145719
 *  docs: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions
 */
declare const METHOD_NAMES: readonly ["trace", "debug", "info", "log", "warn", "error"];
/**
 * 方法名称类型
 *  即 'trace' | 'debug' | ...
 */
declare type IMethodName = typeof METHOD_NAMES[number];
/**
 * logger实例所有方法
 */
declare type ILoggerMethods = {
    [k in IMethodName]: (...args: any[]) => void;
} & {
    invoke: (args: any[], context: any) => void;
};
/**
 * logger 方法调用的 context
 */
interface ILoggerContext {
    context: {
        /**
         * 日志级别
         */
        level?: IMethodName;
        /** 自定义logger 的名称 */
        name?: string;
        [k: string]: any;
    };
}
/** 日志底层处理函数 */
declare type ILoggerHandler = (args: any[], context: Required<ILoggerContext['context']>) => void;
/**
 * 配置格式
 */
export interface ILoggerConfig {
    /**
     * 当前启用的日志级别, 默认支持所有日志
     *  对应 METHOD_NAMES 中的索引
     */
    levelIndex: number;
    /** 日志上报 */
    loggerReporter?: ILoggerHandler;
    /** 日志打印 */
    loggerHandler: ILoggerHandler;
}
/** 自定义的日志方法 */
export declare type ILogger = ILoggerMethods & ILoggerContext;
export declare type ILoggerMain = ILogger & {
    get: (logName: string) => ILogger;
    setLevel: (levelName: string) => void;
};
/** 日志对象 */
export declare const logger: ILoggerMain;
export {};
