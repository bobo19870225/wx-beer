"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.callWxOpenApi = exports.callWedaApi = exports.callWorkflow = exports.callCommonService = exports.callConnector = exports.callModel = exports.callDataSource = void 0;
const tcb_1 = require("./tcb");
const error_1 = require("./error");
const remote_api_1 = require("./remote-api");
async function callWeda(params) {
    const isPreview = (params.envType || (0, tcb_1.getConfig)('envType')) === 'pre';
    const fnName = isPreview ? 'lowcode-datasource-preview' : 'lowcode-datasource';
    const newParams = Object.assign({}, params || {}, { wedaTarget: (0, tcb_1.getConfig)('wedaTarget') });
    const response = await (0, tcb_1.getApp)().callFunction({
        name: fnName,
        data: newParams,
    });
    // @ts-ignore
    if (!response.result || response.code) {
        // @ts-ignore
        throw new error_1.TCBError(`TCBError.${response.code}`, `${response.code} ${response.message}, requestId: ${response.requestId}, original response: ${JSON.stringify(response)}`);
    }
    const { result } = response;
    if (!result.code)
        return result.data;
    throw new error_1.TCBError(result.code, result.message, {
        reason: result.reason,
    });
}
/**
 * 调用数据源
 * @deprecated 请使用 callModel / callConnector 替代
 */
function callDataSource(params) {
    const newParams = Object.assign({}, params, { dataSourceName: params.name });
    // @ts-ignore
    delete newParams.name;
    return callWeda(newParams);
}
exports.callDataSource = callDataSource;
/**
 * 调用模型数据源
 */
function callModel(params) {
    const { methodName, name, params: newParams } = params, rest = __rest(params, ["methodName", "name", "params"]);
    return (0, remote_api_1.fetchWeda)(Object.assign({}, rest, {
        action: 'ProcessInternalMethod',
        data: {
            method: methodName,
            dataSourceName: name,
            params: newParams || {},
        },
    })).then(res => res.Data);
}
exports.callModel = callModel;
/**
 * 调用连接器
 */
exports.callConnector = callDataSource;
/**
 * 调用数据源公共方法
 */
function callCommonService(params) {
    const newParams = Object.assign({}, params, { mode: 'c' });
    return callWeda(newParams);
}
exports.callCommonService = callCommonService;
/** 调用流程 */
exports.callWorkflow = remote_api_1.fetchWeda;
/** 调用微搭API */
exports.callWedaApi = remote_api_1.fetchWeda;
/**
 * 调用微信 API
 */
function callWxOpenApi(params) {
    return (0, remote_api_1.fetchWeda)({
        action: 'InvokeWxSpData',
        data: Object.assign({
            wxAppId: process.env.WX_FROM_APPID || process.env.WX_APPID,
        }, params),
    });
}
exports.callWxOpenApi = callWxOpenApi;
