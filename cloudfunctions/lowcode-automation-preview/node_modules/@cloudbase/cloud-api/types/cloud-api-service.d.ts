import { fetch as _fetch, fetchStream as _fetchStream } from './request';
export interface ServiceOptions {
    service: string;
    version?: string;
    proxy?: string;
    timeout?: number;
    region?: string;
    baseParams?: Record<string, any>;
    credential?: Credential;
    getCredential?: () => Promise<Credential> | Credential;
}
export interface Credential {
    secretId: string;
    secretKey: string;
    token?: string;
    tokenExpired?: number;
}
export interface RequestOptions {
    action: string;
    data?: Record<string, any>;
    method?: 'POST' | 'GET';
    region?: string;
}
export declare const fetch: typeof _fetch;
export declare const fetchStream: typeof _fetchStream;
export declare const nodeFetch: typeof import("node-fetch").default;
export declare class CloudApiService {
    static serviceCacheMap: Record<string, CloudApiService>;
    static getInstance(options: ServiceOptions): CloudApiService;
    service: string;
    version: string;
    proxy: string;
    timeout: number;
    region: string;
    credential: Credential;
    baseParams: Record<string, any>;
    getCredential: () => Promise<Credential> | Credential;
    url: string;
    host: string;
    action: string;
    method: 'POST' | 'GET';
    data: Record<string, any>;
    payload: Record<string, any>;
    constructor(options: ServiceOptions);
    get baseUrl(): any;
    request(options: RequestOptions): any;
    request(action: string, data?: Record<string, any>, method?: 'POST' | 'GET'): any;
    requestWithSign(region: any): Promise<any>;
    getRequestSign(timestamp: number): string;
    clearCredentialCache(): void;
}
