var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { TransformStream as _TransformStream, ReadableStream as _ReadableStream } from 'web-streams-polyfill';
import { createReadableStreamWrapper } from '@mattiasbuelens/web-streams-adapter';
import { createParser } from 'eventsource-parser';
import { TextDecoder } from 'text-encoding-shim';
export var ReadableStream = _ReadableStream;
export var TransformStream = _TransformStream;
export var createEventSourceParserTransformStream = function () {
    var parser;
    return new TransformStream({
        start: function (controller) {
            parser = createParser(function (event) {
                if (event.type === 'event') {
                    controller.enqueue(event);
                }
            });
        },
        transform: function (chunk) {
            parser.feed(chunk);
        },
    });
};
export var toPolyfillReadable = createReadableStreamWrapper(ReadableStream);
var TextDecoderStream = (function () {
    function TextDecoderStream(encoding, options) {
        if (encoding === void 0) { encoding = 'utf-8'; }
        if (options === void 0) { options = {}; }
        var _this = this;
        this.transform = new TransformStream({
            transform: function (chunk, controller) {
                var value = _this.handle.decode(new Uint8Array(chunk), { stream: true });
                if (value) {
                    controller.enqueue(value);
                }
            },
            flush: function (controller) {
                var value = _this.handle.decode();
                if (value) {
                    controller.enqueue(value);
                }
                controller.terminate();
            },
        });
        this.handle = new TextDecoder(encoding, options);
    }
    Object.defineProperty(TextDecoderStream.prototype, "encoding", {
        get: function () {
            return this.handle.encoding;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextDecoderStream.prototype, "fatal", {
        get: function () {
            return this.handle.fatal;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextDecoderStream.prototype, "ignoreBOM", {
        get: function () {
            return this.handle.ignoreBOM;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextDecoderStream.prototype, "readable", {
        get: function () {
            return this.transform.readable;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextDecoderStream.prototype, "writable", {
        get: function () {
            return this.transform.writable;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextDecoderStream.prototype, Symbol.toStringTag, {
        get: function () {
            return 'TextDecoderStream';
        },
        enumerable: false,
        configurable: true
    });
    return TextDecoderStream;
}());
export { TextDecoderStream };
export function createAsyncIterable(stream) {
    var _stream = stream;
    _stream[Symbol.asyncIterator] = function () {
        var reader = stream.getReader();
        return {
            next: function () {
                return __awaiter(this, void 0, void 0, function () {
                    var _a, done, value;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0: return [4, reader.read()];
                            case 1:
                                _a = _b.sent(), done = _a.done, value = _a.value;
                                return [2, done ? { done: true, value: undefined } : { done: false, value: value }];
                        }
                    });
                });
            },
        };
    };
    return _stream;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLGVBQWUsSUFBSSxnQkFBZ0IsRUFBRSxjQUFjLElBQUksZUFBZSxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFDN0csT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0scUNBQXFDLENBQUE7QUFDakYsT0FBTyxFQUFFLFlBQVksRUFBNEMsTUFBTSxvQkFBb0IsQ0FBQTtBQUUzRixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFFaEQsTUFBTSxDQUFDLElBQU0sY0FBYyxHQUFHLGVBVzdCLENBQUE7QUFFRCxNQUFNLENBQUMsSUFBTSxlQUFlLEdBQUcsZ0JBUTlCLENBQUE7QUFFRCxNQUFNLENBQUMsSUFBTSxzQ0FBc0MsR0FBRztJQUNwRCxJQUFJLE1BQTBCLENBQUE7SUFFOUIsT0FBTyxJQUFJLGVBQWUsQ0FBc0I7UUFDOUMsS0FBSyxZQUFDLFVBQVU7WUFDZCxNQUFNLEdBQUcsWUFBWSxDQUFDLFVBQUMsS0FBSztnQkFDMUIsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRTtvQkFDMUIsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtpQkFDMUI7WUFDSCxDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUM7UUFDRCxTQUFTLFlBQUMsS0FBSztZQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDcEIsQ0FBQztLQUNGLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxJQUFNLGtCQUFrQixHQUFHLDJCQUEyQixDQUFDLGNBQWMsQ0FBQyxDQUFBO0FBRTdFO0lBcUJFLDJCQUFZLFFBQWtCLEVBQUUsT0FBZ0M7UUFBcEQseUJBQUEsRUFBQSxrQkFBa0I7UUFBRSx3QkFBQSxFQUFBLFlBQWdDO1FBQWhFLGlCQUVDO1FBcEJPLGNBQVMsR0FBRyxJQUFJLGVBQWUsQ0FBQztZQUN0QyxTQUFTLEVBQUUsVUFBQyxLQUFLLEVBQUUsVUFBVTtnQkFDM0IsSUFBTSxLQUFLLEdBQUcsS0FBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtnQkFFekUsSUFBSSxLQUFLLEVBQUU7b0JBQ1QsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtpQkFDMUI7WUFDSCxDQUFDO1lBQ0QsS0FBSyxFQUFFLFVBQUMsVUFBVTtnQkFDaEIsSUFBTSxLQUFLLEdBQUcsS0FBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTtnQkFDbEMsSUFBSSxLQUFLLEVBQUU7b0JBQ1QsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtpQkFDMUI7Z0JBRUQsVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFBO1lBQ3hCLENBQUM7U0FDRixDQUFDLENBQUE7UUFHQSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksV0FBVyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUNsRCxDQUFDO0lBRUQsc0JBQUksdUNBQVE7YUFBWjtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUE7UUFDN0IsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSxvQ0FBSzthQUFUO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQTtRQUMxQixDQUFDOzs7T0FBQTtJQUVELHNCQUFJLHdDQUFTO2FBQWI7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFBO1FBQzlCLENBQUM7OztPQUFBO0lBRUQsc0JBQUksdUNBQVE7YUFBWjtZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUE7UUFDaEMsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSx1Q0FBUTthQUFaO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQTtRQUNoQyxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLDZCQUFDLE1BQU0sQ0FBQyxXQUFZO2FBQXhCO1lBQ0UsT0FBTyxtQkFBbUIsQ0FBQTtRQUM1QixDQUFDOzs7T0FBQTtJQUNILHdCQUFDO0FBQUQsQ0FBQyxBQWhERCxJQWdEQzs7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQUksTUFBeUI7SUFDOUQsSUFBTSxPQUFPLEdBQUcsTUFBd0MsQ0FBQTtJQUN4RCxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHO1FBQzlCLElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtRQUNqQyxPQUFPO1lBQ0MsSUFBSTs7Ozs7b0NBQ2dCLFdBQU0sTUFBTSxDQUFDLElBQUksRUFBRSxFQUFBOztnQ0FBckMsS0FBa0IsU0FBbUIsRUFBbkMsSUFBSSxVQUFBLEVBQUUsS0FBSyxXQUFBO2dDQUNuQixXQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssT0FBQSxFQUFFLEVBQUE7Ozs7YUFDeEU7U0FDRixDQUFBO0lBQ0gsQ0FBQyxDQUFBO0lBQ0QsT0FBTyxPQUFPLENBQUE7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYW5zZm9ybVN0cmVhbSBhcyBfVHJhbnNmb3JtU3RyZWFtLCBSZWFkYWJsZVN0cmVhbSBhcyBfUmVhZGFibGVTdHJlYW0gfSBmcm9tICd3ZWItc3RyZWFtcy1wb2x5ZmlsbCdcbmltcG9ydCB7IGNyZWF0ZVJlYWRhYmxlU3RyZWFtV3JhcHBlciB9IGZyb20gJ0BtYXR0aWFzYnVlbGVucy93ZWItc3RyZWFtcy1hZGFwdGVyJ1xuaW1wb3J0IHsgY3JlYXRlUGFyc2VyLCB0eXBlIEV2ZW50U291cmNlUGFyc2VyLCB0eXBlIFBhcnNlZEV2ZW50IH0gZnJvbSAnZXZlbnRzb3VyY2UtcGFyc2VyJ1xuaW1wb3J0IHR5cGUgeyBBc3luY0l0ZXJhYmxlUmVhZGFibGVTdHJlYW0gfSBmcm9tICcuL3R5cGUnXG5pbXBvcnQgeyBUZXh0RGVjb2RlciB9IGZyb20gJ3RleHQtZW5jb2Rpbmctc2hpbSdcblxuZXhwb3J0IGNvbnN0IFJlYWRhYmxlU3RyZWFtID0gX1JlYWRhYmxlU3RyZWFtIGFzIHtcbiAgcHJvdG90eXBlOiBSZWFkYWJsZVN0cmVhbVxuXG4gIG5ldyAoXG4gICAgdW5kZXJseWluZ1NvdXJjZTogVW5kZXJseWluZ0J5dGVTb3VyY2UsXG4gICAgc3RyYXRlZ3k/OiB7XG4gICAgICBoaWdoV2F0ZXJNYXJrPzogbnVtYmVyXG4gICAgfSxcbiAgKTogUmVhZGFibGVTdHJlYW08VWludDhBcnJheT5cbiAgbmV3IDxSID0gYW55Pih1bmRlcmx5aW5nU291cmNlOiBVbmRlcmx5aW5nRGVmYXVsdFNvdXJjZTxSPiwgc3RyYXRlZ3k/OiBRdWV1aW5nU3RyYXRlZ3k8Uj4pOiBSZWFkYWJsZVN0cmVhbTxSPlxuICBuZXcgPFIgPSBhbnk+KHVuZGVybHlpbmdTb3VyY2U/OiBVbmRlcmx5aW5nU291cmNlPFI+LCBzdHJhdGVneT86IFF1ZXVpbmdTdHJhdGVneTxSPik6IFJlYWRhYmxlU3RyZWFtPFI+XG59XG5cbmV4cG9ydCBjb25zdCBUcmFuc2Zvcm1TdHJlYW0gPSBfVHJhbnNmb3JtU3RyZWFtIGFzIHtcbiAgcHJvdG90eXBlOiBUcmFuc2Zvcm1TdHJlYW1cblxuICBuZXcgPEkgPSBhbnksIE8gPSBhbnk+KFxuICAgIHRyYW5zZm9ybWVyPzogVHJhbnNmb3JtZXI8SSwgTz4sXG4gICAgd3JpdGFibGVTdHJhdGVneT86IFF1ZXVpbmdTdHJhdGVneTxJPixcbiAgICByZWFkYWJsZVN0cmF0ZWd5PzogUXVldWluZ1N0cmF0ZWd5PE8+LFxuICApOiBUcmFuc2Zvcm1TdHJlYW08SSwgTz5cbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUV2ZW50U291cmNlUGFyc2VyVHJhbnNmb3JtU3RyZWFtID0gKCkgPT4ge1xuICBsZXQgcGFyc2VyITogRXZlbnRTb3VyY2VQYXJzZXJcblxuICByZXR1cm4gbmV3IFRyYW5zZm9ybVN0cmVhbTxzdHJpbmcsIFBhcnNlZEV2ZW50Pih7XG4gICAgc3RhcnQoY29udHJvbGxlcikge1xuICAgICAgcGFyc2VyID0gY3JlYXRlUGFyc2VyKChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2V2ZW50Jykge1xuICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShldmVudClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIHRyYW5zZm9ybShjaHVuaykge1xuICAgICAgcGFyc2VyLmZlZWQoY2h1bmspXG4gICAgfSxcbiAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IHRvUG9seWZpbGxSZWFkYWJsZSA9IGNyZWF0ZVJlYWRhYmxlU3RyZWFtV3JhcHBlcihSZWFkYWJsZVN0cmVhbSlcblxuZXhwb3J0IGNsYXNzIFRleHREZWNvZGVyU3RyZWFtIHtcbiAgcHJpdmF0ZSBoYW5kbGU6IFRleHREZWNvZGVyXG5cbiAgcHJpdmF0ZSB0cmFuc2Zvcm0gPSBuZXcgVHJhbnNmb3JtU3RyZWFtKHtcbiAgICB0cmFuc2Zvcm06IChjaHVuaywgY29udHJvbGxlcikgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmhhbmRsZS5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoY2h1bmspLCB7IHN0cmVhbTogdHJ1ZSB9KVxuXG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHZhbHVlKVxuICAgICAgfVxuICAgIH0sXG4gICAgZmx1c2g6IChjb250cm9sbGVyKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuaGFuZGxlLmRlY29kZSgpXG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHZhbHVlKVxuICAgICAgfVxuXG4gICAgICBjb250cm9sbGVyLnRlcm1pbmF0ZSgpXG4gICAgfSxcbiAgfSlcblxuICBjb25zdHJ1Y3RvcihlbmNvZGluZyA9ICd1dGYtOCcsIG9wdGlvbnM6IFRleHREZWNvZGVyT3B0aW9ucyA9IHt9KSB7XG4gICAgdGhpcy5oYW5kbGUgPSBuZXcgVGV4dERlY29kZXIoZW5jb2RpbmcsIG9wdGlvbnMpXG4gIH1cblxuICBnZXQgZW5jb2RpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlLmVuY29kaW5nXG4gIH1cblxuICBnZXQgZmF0YWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlLmZhdGFsXG4gIH1cblxuICBnZXQgaWdub3JlQk9NKCkge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZS5pZ25vcmVCT01cbiAgfVxuXG4gIGdldCByZWFkYWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0ucmVhZGFibGVcbiAgfVxuXG4gIGdldCB3cml0YWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0ud3JpdGFibGVcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ1RleHREZWNvZGVyU3RyZWFtJ1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBc3luY0l0ZXJhYmxlPFQ+KHN0cmVhbTogUmVhZGFibGVTdHJlYW08VD4pIHtcbiAgY29uc3QgX3N0cmVhbSA9IHN0cmVhbSBhcyBBc3luY0l0ZXJhYmxlUmVhZGFibGVTdHJlYW08VD5cbiAgX3N0cmVhbVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSAoKSA9PiB7XG4gICAgY29uc3QgcmVhZGVyID0gc3RyZWFtLmdldFJlYWRlcigpXG4gICAgcmV0dXJuIHtcbiAgICAgIGFzeW5jIG5leHQoKTogUHJvbWlzZTxJdGVyYXRvclJlc3VsdDxUPj4ge1xuICAgICAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpXG4gICAgICAgIHJldHVybiBkb25lID8geyBkb25lOiB0cnVlLCB2YWx1ZTogdW5kZWZpbmVkIH0gOiB7IGRvbmU6IGZhbHNlLCB2YWx1ZSB9XG4gICAgICB9LFxuICAgIH1cbiAgfVxuICByZXR1cm4gX3N0cmVhbVxufVxuIl19