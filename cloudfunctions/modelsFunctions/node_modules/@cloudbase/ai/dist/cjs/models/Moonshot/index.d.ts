import { type ParsedEvent } from 'eventsource-parser';
import type { MoonshotInputData, MoonshotGenerateTextOutput, MoonshotStreamTextOutput } from './type';
import type { ChatModel, StreamTextResult, ModelReq } from '../../type';
export declare class MoonshotModel implements ChatModel {
    private req;
    baseUrl: string;
    subUrl: string;
    constructor(req: ModelReq, baseUrl: string, subUrl?: string);
    private get url();
    generateText(data: MoonshotInputData): Promise<{
        text: string;
        rawResponse: MoonshotGenerateTextOutput;
    }>;
    streamText(data: MoonshotInputData): Promise<MoonshotModelStreamResult>;
}
declare class MoonshotModelStreamResult implements StreamTextResult {
    private _eventSourceStream;
    constructor(_stream: ReadableStream<Uint8Array>);
    private get teeedStream();
    get eventSourceStream(): import("../../type").AsyncIterableReadableStream<ParsedEvent>;
    get dataStream(): import("../../type").AsyncIterableReadableStream<MoonshotStreamTextOutput>;
    get textStream(): import("../../type").AsyncIterableReadableStream<string>;
}
export {};
