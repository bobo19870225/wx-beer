import { type ParsedEvent } from 'eventsource-parser';
import { BotReq } from '../type';
import { IBotPreview, IBotSendMessage, ICreateBot, IDeleteBot, IGenerateBot, IGenerateImage, IGetBot, IGetBotChatRecords, IGetBotFeedback, IGetBotList, IGetBotRecommendQuestions, ISendBotFeedback, IUpdateBot } from './types';
export declare class Bot {
    baseUrl: string;
    req: BotReq;
    constructor(req: BotReq, baseUrl: string);
    list(props: IGetBotList): Promise<Object>;
    create({ botInfo }: ICreateBot): Promise<Object>;
    get({ botId }: IGetBot): Promise<Object>;
    update({ botId, botInfo }: IUpdateBot): Promise<Object>;
    delete({ botId }: IDeleteBot): Promise<Object>;
    getChatRecords(props: IGetBotChatRecords): Promise<Object>;
    sendFeedback({ userFeedback }: ISendBotFeedback): Promise<Object>;
    getFeedback(props: IGetBotFeedback): Promise<Object>;
    getRecommendQuestions(props: IGetBotRecommendQuestions): Promise<StreamResult>;
    generateBot(props: IGenerateBot): Promise<StreamResult>;
    getPreview(props: IBotPreview): Promise<StreamResult>;
    generateImage(props: IGenerateImage): Promise<Object>;
    sendMessage(props: IBotSendMessage): Promise<StreamResult>;
    private join;
}
type BotEventStreamData = {
    content: string;
};
declare class StreamResult {
    private _eventSourceStream;
    constructor(_stream: ReadableStream<Uint8Array>);
    private get teeedStream();
    get eventSourceStream(): import("../type").AsyncIterableReadableStream<ParsedEvent>;
    get dataStream(): import("../type").AsyncIterableReadableStream<BotEventStreamData>;
    get textStream(): import("../type").AsyncIterableReadableStream<string>;
}
export {};
