import { type ParsedEvent } from 'eventsource-parser'
import {
  createAsyncIterable,
  TransformStream,
  TextDecoderStream,
  createEventSourceParserTransformStream,
  toPolyfillReadable,
} from '../../utils'
import type { DashScopeInputData, DashScopeGenerateTextOutput, DashScopeStreamTextOutput } from './type'
import type { ChatModel, StreamTextResult, ModelReq } from '../../type'

export class DashScopeModel implements ChatModel {
  public subUrl = 'dashscope/compatible-mode/v1/chat/completions'
  constructor(private req: ModelReq, public baseUrl: string, subUrl?: string) {
    if (subUrl != null) {
      this.subUrl = subUrl
    }
  }

  private get url() {
    return `${this.baseUrl}/${this.subUrl}`
  }

  async generateText(data: DashScopeInputData) {
    const res = (await this.req({
      url: this.url,
      data: {
        ...data,
        stream: false,
      },
      stream: false,
    })) as DashScopeGenerateTextOutput
    return {
      text: (res?.choices?.[0]?.message?.content as string) ?? '',
      rawResponse: res,
    }
  }

  async streamText(data: DashScopeInputData) {
    const stream = await this.req({
      url: this.url,
      data: {
        ...data,
        stream: true,
      },
      stream: true,
    })
    return new DashScopeModelStreamResult(stream)
  }
}

class DashScopeModelStreamResult implements StreamTextResult {
  private _eventSourceStream: ReadableStream<ParsedEvent>

  constructor(_stream: ReadableStream<Uint8Array>) {
    const stream = toPolyfillReadable(_stream) as typeof _stream
    this._eventSourceStream = stream
      .pipeThrough(new TextDecoderStream())
      .pipeThrough(createEventSourceParserTransformStream())
  }

  private get teeedStream() {
    const [s1, s2] = this._eventSourceStream.tee()
    this._eventSourceStream = s2
    return s1
  }

  get eventSourceStream() {
    return createAsyncIterable(this.teeedStream)
  }

  get dataStream() {
    return createAsyncIterable(this.eventSourceStream.pipeThrough(new TransformStream<ParsedEvent, DashScopeStreamTextOutput>({
      transform(chunk, controller) {
        try {
          const data = JSON.parse(chunk.data) as DashScopeStreamTextOutput
          controller.enqueue(data)
        } catch (e) {
          if (chunk.data !== '[DONE]') {
            console.warn('Error when transforming event source data to json', e)
          }
        }
      },
    }),),)
  }

  get textStream() {
    return createAsyncIterable(this.dataStream.pipeThrough(new TransformStream<DashScopeStreamTextOutput, string>({
      transform(chunk, controller) {
        controller.enqueue(chunk?.choices?.[0]?.delta?.content ?? '')
      },
    }),),)
  }
}
