import type { ICloudbase } from '@cloudbase/types'
import type { ICloudbaseComponent } from '@cloudbase/types/component'
import type { SDKRequestInterface } from '@cloudbase/adapter-interface'
import { Bot } from './bot'
import * as models from './models'
import * as types from './type'
import * as utils from './utils'

const { MODELS, ...restModels } = models

class AI {
  public aiBaseUrl: string
  public aiBotBaseUrl: string
  public bot: Bot

  constructor(private req: SDKRequestInterface, public baseUrl: string) {
    this.aiBaseUrl = `${baseUrl}/ai`
    this.aiBotBaseUrl = `${baseUrl}/aibot`
    this.bot = new Bot(this.botRequest, this.aiBotBaseUrl)
  }

  createModel<T extends keyof typeof MODELS>(model: T) {
    return new MODELS[model](this.modelRequest, this.aiBaseUrl) as InstanceType<(typeof MODELS)[T]>
  }

  registerModel(name: string, model: types.ChatModelConstructor) {
    if (MODELS[name] != null) {
      console.warn(`AI model ${name} already exists!`)
      return
    }
    MODELS[name] = model
  }

  modelRequest: types.ModelReq = async ({ url, data, headers, stream }) => (
    await this.req.fetch({
      method: 'post',
      headers: {
        ...headers,
      },
      body: JSON.stringify(data),
      url,
      stream,
    })
  ).data

  botRequest: types.BotReq = async ({ method, url, data = {}, headers, stream }) => {
    if (method === 'get') {
      return (await this.req.fetch({ url: `${url}?${objectToParam(data)}`, method, headers, stream })).data
    }

    return (
      await this.req.fetch({
        url,
        body: JSON.stringify(data),
        headers: { 'Content-Type': 'application/json', ...headers },
        stream,
        method,
      })
    ).data

    function objectToParam(obj: Object) {
      return Object.entries(obj)
        .map(([key, value]) => `${key}=${value}`)
        .join('&')
    }
  }
}

const COMPONENT_NAME = 'ai'

interface AIInitOption {
  env?: string
  baseUrl?: string
}

async function ai(this: ICloudbase, options?: AIInitOption) {
  const req = this.request

  if (req.fetch == null) {
    throw new Error('cloudbase.request.fetch() unimplemented!')
  }

  const accessTokenFromAuth = this.authInstance
    ? await this.authInstance!.getAccessToken()
    : { accessToken: '', env: '' }

  const env = options?.env ?? accessTokenFromAuth.env
  const baseUrl = options?.baseUrl ?? `https://${env}.api.tcloudbasegateway.com/v1`

  return new AI(req, baseUrl)
}

const component: ICloudbaseComponent = {
  name: COMPONENT_NAME,
  entity: { ai },
}

function registerAi(app: ICloudbase) {
  try {
    app.registerComponent(component)
  } catch (e) {
    console.warn(e)
  }
}

export { types, utils, restModels as models, registerAi, AI, Bot }
