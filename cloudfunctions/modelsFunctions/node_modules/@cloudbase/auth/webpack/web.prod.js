const path = require('path')
const webpack = require('webpack')
const TerserPlugin = require('terser-webpack-plugin')
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin

module.exports = function (options) {
  const { context, entry, output, mode, watch, externals, definePlugin = {}, optimization = {} } = options
  const isDevelopment = mode !== 'production'
  let plugins = [
    new webpack.DefinePlugin(
      Object.assign(
        {
          'globalThis.IS_MP_BUILD': false,
        },
        definePlugin,
      ),
    ),
    // new BundleAnalyzerPlugin(),
  ].filter((item) => !!item)
  return {
    context,
    entry,
    mode,
    watch,
    watchOptions: {
      ignored: [output.path],
    },
    output,
    externals,
    cache: {
      type: 'memory',
    },
    devtool: false,
    resolve: {
      extensions: ['.ts', '.js', '.json'],
    },
    module: {
      rules: [
        {
          test: /\.ts$/,
          exclude: [/node_modules/],

          use: [
            'babel-loader',
            { loader: 'ts-loader', options: { configFile: path.resolve(context, './tsconfig.esm.json') } },
          ],
        },
        {
          test: /\.js$/,
          exclude: [/node_modules/],
          use: ['babel-loader'],
        },
        {
          test: /package\.json$/,
          loader: 'package-json-cleanup-loader',
          options: {
            only: ['version'],
          },
        },
      ],
      noParse: [/sjcl\.js$/],
    },
    plugins,
    optimization: {
      emitOnErrors: false,
      removeEmptyChunks: true,
      usedExports: true,
      ...optimization,
      ...(isDevelopment
        ? {
            minimize: false,
            removeAvailableModules: false,
            concatenateModules: true,
          }
        : {
            minimizer: [
              new TerserPlugin({
                test: /\.js(\?.*)?$/i,
                cache: false,
                parallel: true,
              }),
            ],
          }),
    },
  }
}
