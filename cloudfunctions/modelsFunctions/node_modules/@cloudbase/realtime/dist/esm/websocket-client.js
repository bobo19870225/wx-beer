var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { VirtualWebSocketClient } from './virtual-websocket-client';
import { genRequestId } from './message';
import { CloseEventCode, CLOSE_EVENT_CODE_INFO, getWSCloseError, } from './ws-event';
import { ERR_CODE, TimeoutError, RealtimeErrorMessageError, CloudSDKError } from './error';
import { getWsClass, getRuntime } from './common';
import { sleep } from './utils';
var WS_READY_STATE = {
    CONNECTING: 0,
    OPEN: 1,
    CLOSING: 2,
    CLOSED: 3,
};
var MAX_RTT_OBSERVED = 3;
var DEFAULT_EXPECTED_EVENT_WAIT_TIME = 5000;
var DEFAULT_UNTRUSTED_RTT_THRESHOLD = 10000;
var DEFAULT_MAX_RECONNECT = 5;
var DEFAULT_WS_RECONNECT_INTERVAL = 10000;
var DEFAULT_PING_FAIL_TOLERANCE = 2;
var DEFAULT_PONG_MISS_TOLERANCE = 2;
var DEFAULT_LOGIN_TIMEOUT = 5000;
var RealtimeWebSocketClient = (function () {
    function RealtimeWebSocketClient(options) {
        var _this = this;
        this.virtualWSClient = new Set();
        this.queryIdClientMap = new Map();
        this.watchIdClientMap = new Map();
        this.pingFailed = 0;
        this.pongMissed = 0;
        this.logins = new Map();
        this.wsReadySubsribers = [];
        this.wsResponseWait = new Map();
        this.rttObserved = [];
        this.send = function (opts) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2, new Promise(function (_resolve, _reject) {
                        void (function () { return __awaiter(_this, void 0, void 0, function () {
                            var timeoutId, hasResolved, hasRejected, resolve, reject, respWaitSpec, err_1, e_1;
                            var _this = this;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        hasResolved = false;
                                        hasRejected = false;
                                        resolve = function (value) {
                                            hasResolved = true;
                                            timeoutId && clearTimeout(timeoutId);
                                            _resolve(value);
                                        };
                                        reject = function (error) {
                                            hasRejected = true;
                                            timeoutId && clearTimeout(timeoutId);
                                            _reject(error);
                                        };
                                        if (opts.timeout) {
                                            timeoutId = setTimeout(function () {
                                                (function () { return __awaiter(_this, void 0, void 0, function () {
                                                    return __generator(this, function (_a) {
                                                        switch (_a.label) {
                                                            case 0:
                                                                if (!(!hasResolved || !hasRejected)) return [3, 2];
                                                                return [4, sleep(0)];
                                                            case 1:
                                                                _a.sent();
                                                                if (!hasResolved || !hasRejected) {
                                                                    reject(new TimeoutError('wsclient.send timedout'));
                                                                }
                                                                _a.label = 2;
                                                            case 2: return [2];
                                                        }
                                                    });
                                                }); })();
                                            }, opts.timeout);
                                        }
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 8, , 9]);
                                        if (!(this.wsInitPromise !== undefined || this.wsInitPromise !== null)) return [3, 3];
                                        return [4, this.wsInitPromise];
                                    case 2:
                                        _a.sent();
                                        _a.label = 3;
                                    case 3:
                                        if (!this.ws) {
                                            reject(new Error('invalid state: ws connection not exists, can not send message'));
                                            return [2];
                                        }
                                        if (this.ws.readyState !== WS_READY_STATE.OPEN) {
                                            reject(new Error("ws readyState invalid: ".concat(this.ws.readyState, ", can not send message")));
                                            return [2];
                                        }
                                        if (opts.waitResponse) {
                                            respWaitSpec = {
                                                resolve: resolve,
                                                reject: reject,
                                                skipOnMessage: opts.skipOnMessage,
                                            };
                                            this.wsResponseWait.set(opts.msg.requestId, respWaitSpec);
                                        }
                                        _a.label = 4;
                                    case 4:
                                        _a.trys.push([4, 6, , 7]);
                                        return [4, this.ws.send(JSON.stringify(opts.msg))];
                                    case 5:
                                        _a.sent();
                                        if (!opts.waitResponse) {
                                            resolve(void 0);
                                        }
                                        return [3, 7];
                                    case 6:
                                        err_1 = _a.sent();
                                        if (err_1) {
                                            reject(err_1);
                                            if (opts.waitResponse) {
                                                this.wsResponseWait.delete(opts.msg.requestId);
                                            }
                                        }
                                        return [3, 7];
                                    case 7: return [3, 9];
                                    case 8:
                                        e_1 = _a.sent();
                                        reject(e_1);
                                        return [3, 9];
                                    case 9: return [2];
                                }
                            });
                        }); })();
                    })];
            });
        }); };
        this.closeAllClients = function (error) {
            _this.virtualWSClient.forEach(function (client) {
                client.closeWithError(error);
            });
        };
        this.pauseClients = function (clients) {
            (clients || _this.virtualWSClient).forEach(function (client) {
                client.pause();
            });
        };
        this.resumeClients = function (clients) {
            (clients || _this.virtualWSClient).forEach(function (client) {
                client.resume();
            });
        };
        this.initWebSocketConnection = function (reconnect, availableRetries) {
            if (availableRetries === void 0) { availableRetries = _this.maxReconnect; }
            return __awaiter(_this, void 0, void 0, function () {
                var e_2;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (reconnect && this.reconnectState) {
                                return [2];
                            }
                            if (reconnect) {
                                this.reconnectState = true;
                            }
                            if (this.wsInitPromise !== undefined && this.wsInitPromise !== null) {
                                return [2, this.wsInitPromise];
                            }
                            if (reconnect) {
                                this.pauseClients();
                            }
                            this.close(CloseEventCode.ReconnectWebSocket);
                            this.wsInitPromise = new Promise(function (resolve, reject) {
                                (function () { return __awaiter(_this, void 0, void 0, function () {
                                    var wsSign_1, e_3, isConnected;
                                    var _this = this;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                _a.trys.push([0, 6, , 11]);
                                                return [4, this.getWsSign()];
                                            case 1:
                                                wsSign_1 = _a.sent();
                                                return [4, new Promise(function (success) {
                                                        var url = wsSign_1.wsUrl || 'wss://tcb-ws.tencentcloudapi.com';
                                                        var wsClass = getWsClass();
                                                        _this.ws = wsClass ? new wsClass(url) : new WebSocket(url);
                                                        success(void 0);
                                                    })];
                                            case 2:
                                                _a.sent();
                                                if (!this.ws.connect) return [3, 4];
                                                return [4, this.ws.connect()];
                                            case 3:
                                                _a.sent();
                                                _a.label = 4;
                                            case 4: return [4, this.initWebSocketEvent()];
                                            case 5:
                                                _a.sent();
                                                resolve();
                                                if (reconnect) {
                                                    this.resumeClients();
                                                    this.reconnectState = false;
                                                }
                                                return [3, 11];
                                            case 6:
                                                e_3 = _a.sent();
                                                console.error('[realtime] initWebSocketConnection connect fail', e_3);
                                                if (!(availableRetries > 0)) return [3, 9];
                                                isConnected = true;
                                                this.wsInitPromise = undefined;
                                                if (!isConnected) return [3, 8];
                                                return [4, sleep(this.reconnectInterval)];
                                            case 7:
                                                _a.sent();
                                                if (reconnect) {
                                                    this.reconnectState = false;
                                                }
                                                _a.label = 8;
                                            case 8:
                                                resolve(this.initWebSocketConnection(reconnect, availableRetries - 1));
                                                return [3, 10];
                                            case 9:
                                                reject(e_3);
                                                if (reconnect) {
                                                    this.closeAllClients(new CloudSDKError({
                                                        errCode: ERR_CODE.SDK_DATABASE_REALTIME_LISTENER_RECONNECT_WATCH_FAIL,
                                                        errMsg: e_3,
                                                    }));
                                                }
                                                _a.label = 10;
                                            case 10: return [3, 11];
                                            case 11: return [2];
                                        }
                                    });
                                }); })();
                            });
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, 4, 5]);
                            return [4, this.wsInitPromise];
                        case 2:
                            _a.sent();
                            this.wsReadySubsribers.forEach(function (_a) {
                                var resolve = _a.resolve;
                                return resolve();
                            });
                            return [3, 5];
                        case 3:
                            e_2 = _a.sent();
                            this.wsReadySubsribers.forEach(function (_a) {
                                var reject = _a.reject;
                                return reject();
                            });
                            return [3, 5];
                        case 4:
                            this.wsInitPromise = undefined;
                            this.wsReadySubsribers = [];
                            return [7];
                        case 5: return [2];
                    }
                });
            });
        };
        this.initWebSocketEvent = function () { return new Promise(function (resolve, reject) {
            if (!_this.ws) {
                throw new Error('can not initWebSocketEvent, ws not exists');
            }
            var wsOpened = false;
            _this.ws.onopen = function (event) {
                console.warn('[realtime] ws event: open', event);
                wsOpened = true;
                resolve();
            };
            _this.ws.onerror = function (event) {
                _this.logins = new Map();
                if (!wsOpened) {
                    console.error('[realtime] ws open failed with ws event: error', event);
                    reject(event);
                }
                else {
                    console.error('[realtime] ws event: error', event);
                    _this.clearHeartbeat();
                    _this.virtualWSClient.forEach(function (client) { return client.closeWithError(new CloudSDKError({
                        errCode: ERR_CODE.SDK_DATABASE_REALTIME_LISTENER_WEBSOCKET_CONNECTION_ERROR,
                        errMsg: event,
                    })); });
                }
            };
            _this.ws.onclose = function (closeEvent) {
                console.warn('[realtime] ws event: close', closeEvent);
                _this.logins = new Map();
                _this.clearHeartbeat();
                switch (closeEvent.code) {
                    case CloseEventCode.ReconnectWebSocket: {
                        break;
                    }
                    case CloseEventCode.NoRealtimeListeners: {
                        break;
                    }
                    case CloseEventCode.HeartbeatPingError:
                    case CloseEventCode.HeartbeatPongTimeoutError:
                    case CloseEventCode.NormalClosure:
                    case CloseEventCode.AbnormalClosure: {
                        if (_this.maxReconnect > 0) {
                            _this.initWebSocketConnection(true, _this.maxReconnect);
                        }
                        else {
                            _this.closeAllClients(getWSCloseError(closeEvent.code));
                        }
                        break;
                    }
                    case CloseEventCode.NoAuthentication: {
                        _this.closeAllClients(getWSCloseError(closeEvent.code, closeEvent.reason));
                        break;
                    }
                    default: {
                        if (_this.maxReconnect > 0) {
                            _this.initWebSocketConnection(true, _this.maxReconnect);
                        }
                        else {
                            _this.closeAllClients(getWSCloseError(closeEvent.code));
                        }
                    }
                }
            };
            _this.ws.onmessage = function (res) {
                var rawMsg = res.data;
                _this.heartbeat();
                var msg;
                try {
                    msg = JSON.parse(rawMsg);
                }
                catch (e) {
                    throw new Error("[realtime] onMessage parse res.data error: ".concat(e));
                }
                if (msg.msgType === 'ERROR') {
                    var virtualWatch_1 = null;
                    _this.virtualWSClient.forEach(function (item) {
                        if (item.watchId === msg.watchId) {
                            virtualWatch_1 = item;
                        }
                    });
                    if (virtualWatch_1) {
                        virtualWatch_1.listener.onError(msg);
                    }
                }
                var responseWaitSpec = _this.wsResponseWait.get(msg.requestId);
                if (responseWaitSpec) {
                    try {
                        if (msg.msgType === 'ERROR') {
                            responseWaitSpec.reject(new RealtimeErrorMessageError(msg));
                        }
                        else {
                            responseWaitSpec.resolve(msg);
                        }
                    }
                    catch (e) {
                        console.error('ws onMessage responseWaitSpec.resolve(msg) errored:', e);
                    }
                    finally {
                        _this.wsResponseWait.delete(msg.requestId);
                    }
                    if (responseWaitSpec.skipOnMessage) {
                        return;
                    }
                }
                if (msg.msgType === 'PONG') {
                    if (_this.lastPingSendTS) {
                        var rtt = Date.now() - _this.lastPingSendTS;
                        if (rtt > DEFAULT_UNTRUSTED_RTT_THRESHOLD) {
                            console.warn("[realtime] untrusted rtt observed: ".concat(rtt));
                            return;
                        }
                        if (_this.rttObserved.length >= MAX_RTT_OBSERVED) {
                            _this.rttObserved.splice(0, _this.rttObserved.length - MAX_RTT_OBSERVED + 1);
                        }
                        _this.rttObserved.push(rtt);
                    }
                    return;
                }
                var client = msg.watchId && _this.watchIdClientMap.get(msg.watchId);
                if (client) {
                    client.onMessage(msg);
                }
                else {
                    console.error("[realtime] no realtime listener found responsible for watchId ".concat(msg.watchId, ": "), msg);
                    switch (msg.msgType) {
                        case 'INIT_EVENT':
                        case 'NEXT_EVENT':
                        case 'CHECK_EVENT': {
                            client = _this.queryIdClientMap.get(msg.msgData.queryID);
                            if (client) {
                                client.onMessage(msg);
                            }
                            break;
                        }
                        default: {
                            for (var _i = 0, _a = Array.from(_this.watchIdClientMap.entries()); _i < _a.length; _i++) {
                                var _b = _a[_i], client_1 = _b[1];
                                client_1.onMessage(msg);
                                break;
                            }
                        }
                    }
                }
            };
            _this.heartbeat();
        }); };
        this.isWSConnected = function () { return Boolean(_this.ws && _this.ws.readyState === WS_READY_STATE.OPEN); };
        this.onceWSConnected = function () { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (this.isWSConnected()) {
                    return [2];
                }
                if (this.wsInitPromise !== null && this.wsInitPromise !== undefined) {
                    return [2, this.wsInitPromise];
                }
                return [2, new Promise(function (resolve, reject) {
                        _this.wsReadySubsribers.push({
                            resolve: resolve,
                            reject: reject,
                        });
                    })];
            });
        }); };
        this.webLogin = function (envId, refresh) { return __awaiter(_this, void 0, void 0, function () {
            var loginInfo_1, emptyEnvLoginInfo, promise, loginInfo, loginStartTS, loginResult, curLoginInfo, e_4;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!refresh) {
                            if (envId) {
                                loginInfo_1 = this.logins.get(envId);
                                if (loginInfo_1) {
                                    if (loginInfo_1.loggedIn && loginInfo_1.loginResult) {
                                        return [2, loginInfo_1.loginResult];
                                    }
                                    if (loginInfo_1.loggingInPromise !== null && loginInfo_1.loggingInPromise !== undefined) {
                                        return [2, loginInfo_1.loggingInPromise];
                                    }
                                }
                            }
                            else {
                                emptyEnvLoginInfo = this.logins.get('');
                                if ((emptyEnvLoginInfo === null || emptyEnvLoginInfo === void 0 ? void 0 : emptyEnvLoginInfo.loggingInPromise) !== null && (emptyEnvLoginInfo === null || emptyEnvLoginInfo === void 0 ? void 0 : emptyEnvLoginInfo.loggingInPromise) !== undefined) {
                                    return [2, emptyEnvLoginInfo.loggingInPromise];
                                }
                            }
                        }
                        promise = new Promise(function (resolve, reject) {
                            (function () { return __awaiter(_this, void 0, void 0, function () {
                                var wsSign, msgData, loginMsg, loginResMsg, e_5;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            _a.trys.push([0, 3, , 4]);
                                            return [4, this.getWsSign()];
                                        case 1:
                                            wsSign = _a.sent();
                                            msgData = {
                                                envId: wsSign.envId || '',
                                                accessToken: '',
                                                referrer: 'web',
                                                sdkVersion: '',
                                                dataVersion: '',
                                            };
                                            loginMsg = {
                                                watchId: undefined,
                                                requestId: genRequestId(),
                                                msgType: 'LOGIN',
                                                msgData: msgData,
                                                exMsgData: {
                                                    runtime: getRuntime(),
                                                    signStr: wsSign.signStr,
                                                    secretVersion: wsSign.secretVersion,
                                                },
                                            };
                                            return [4, this.send({
                                                    msg: loginMsg,
                                                    waitResponse: true,
                                                    skipOnMessage: true,
                                                    timeout: DEFAULT_LOGIN_TIMEOUT,
                                                })];
                                        case 2:
                                            loginResMsg = _a.sent();
                                            if (!loginResMsg.msgData.code) {
                                                resolve({
                                                    envId: wsSign.envId,
                                                });
                                            }
                                            else {
                                                reject(new Error("".concat(loginResMsg.msgData.code, " ").concat(loginResMsg.msgData.message)));
                                            }
                                            return [3, 4];
                                        case 3:
                                            e_5 = _a.sent();
                                            reject(e_5);
                                            return [3, 4];
                                        case 4: return [2];
                                    }
                                });
                            }); })();
                        });
                        loginInfo = envId && this.logins.get(envId);
                        loginStartTS = Date.now();
                        if (loginInfo) {
                            loginInfo.loggedIn = false;
                            loginInfo.loggingInPromise = promise;
                            loginInfo.loginStartTS = loginStartTS;
                        }
                        else {
                            loginInfo = {
                                loggedIn: false,
                                loggingInPromise: promise,
                                loginStartTS: loginStartTS,
                            };
                            this.logins.set(envId || '', loginInfo);
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4, promise];
                    case 2:
                        loginResult = _a.sent();
                        curLoginInfo = envId && this.logins.get(envId);
                        if (curLoginInfo
                            && curLoginInfo === loginInfo
                            && curLoginInfo.loginStartTS === loginStartTS) {
                            loginInfo.loggedIn = true;
                            loginInfo.loggingInPromise = undefined;
                            loginInfo.loginStartTS = undefined;
                            loginInfo.loginResult = loginResult;
                            return [2, loginResult];
                        }
                        if (curLoginInfo) {
                            if (curLoginInfo.loggedIn && curLoginInfo.loginResult) {
                                return [2, curLoginInfo.loginResult];
                            }
                            if (curLoginInfo.loggingInPromise !== null && curLoginInfo.loggingInPromise !== undefined) {
                                return [2, curLoginInfo.loggingInPromise];
                            }
                            throw new Error('ws unexpected login info');
                        }
                        else {
                            throw new Error('ws login info reset');
                        }
                        return [3, 4];
                    case 3:
                        e_4 = _a.sent();
                        loginInfo.loggedIn = false;
                        loginInfo.loggingInPromise = undefined;
                        loginInfo.loginStartTS = undefined;
                        loginInfo.loginResult = undefined;
                        throw e_4;
                    case 4: return [2];
                }
            });
        }); };
        this.getWsSign = function () { return __awaiter(_this, void 0, void 0, function () {
            var expiredTs, res, _a, signStr, wsUrl, secretVersion, envId;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.wsSign && this.wsSign.expiredTs > Date.now()) {
                            return [2, this.wsSign];
                        }
                        expiredTs = Date.now() + 60000;
                        return [4, this.context.appConfig.request.send('auth.wsWebSign', { runtime: getRuntime() })];
                    case 1:
                        res = _b.sent();
                        if (res.code) {
                            throw new Error("[tcb-js-sdk] \u83B7\u53D6\u5B9E\u65F6\u6570\u636E\u63A8\u9001\u767B\u5F55\u7968\u636E\u5931\u8D25: ".concat(res.code));
                        }
                        if (res.data) {
                            _a = res.data, signStr = _a.signStr, wsUrl = _a.wsUrl, secretVersion = _a.secretVersion, envId = _a.envId;
                            return [2, {
                                    signStr: signStr,
                                    wsUrl: wsUrl,
                                    secretVersion: secretVersion,
                                    envId: envId,
                                    expiredTs: expiredTs,
                                }];
                        }
                        throw new Error('[tcb-js-sdk] 获取实时数据推送登录票据失败');
                }
            });
        }); };
        this.getWaitExpectedTimeoutLength = function () {
            if (!_this.rttObserved.length) {
                return DEFAULT_EXPECTED_EVENT_WAIT_TIME;
            }
            return ((_this.rttObserved.reduce(function (acc, cur) { return acc + cur; })
                / _this.rttObserved.length)
                * 1.5);
        };
        this.ping = function () { return __awaiter(_this, void 0, void 0, function () {
            var msg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        msg = {
                            watchId: undefined,
                            requestId: genRequestId(),
                            msgType: 'PING',
                            msgData: null,
                        };
                        return [4, this.send({
                                msg: msg,
                            })];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        }); };
        this.onWatchStart = function (client, queryID) {
            _this.queryIdClientMap.set(queryID, client);
        };
        this.onWatchClose = function (client, queryID) {
            if (queryID) {
                _this.queryIdClientMap.delete(queryID);
            }
            _this.watchIdClientMap.delete(client.watchId);
            _this.virtualWSClient.delete(client);
            if (!_this.virtualWSClient.size) {
                _this.close(CloseEventCode.NoRealtimeListeners);
            }
        };
        this.maxReconnect = options.maxReconnect || DEFAULT_MAX_RECONNECT;
        this.reconnectInterval = options.reconnectInterval || DEFAULT_WS_RECONNECT_INTERVAL;
        this.context = options.context;
    }
    RealtimeWebSocketClient.prototype.clearHeartbeat = function () {
        this.pingTimeoutId && clearTimeout(this.pingTimeoutId);
        this.pongTimeoutId && clearTimeout(this.pongTimeoutId);
    };
    RealtimeWebSocketClient.prototype.close = function (code) {
        this.clearHeartbeat();
        if (this.ws) {
            this.ws.close(code, CLOSE_EVENT_CODE_INFO[code].name);
            this.ws = undefined;
        }
    };
    RealtimeWebSocketClient.prototype.watch = function (options) {
        if (!this.ws && (this.wsInitPromise === undefined || this.wsInitPromise === null)) {
            this.initWebSocketConnection(false);
        }
        var virtualClient = new VirtualWebSocketClient(__assign(__assign({}, options), { send: this.send, login: this.webLogin, isWSConnected: this.isWSConnected, onceWSConnected: this.onceWSConnected, getWaitExpectedTimeoutLength: this.getWaitExpectedTimeoutLength, onWatchStart: this.onWatchStart, onWatchClose: this.onWatchClose, debug: true }));
        this.virtualWSClient.add(virtualClient);
        this.watchIdClientMap.set(virtualClient.watchId, virtualClient);
        return virtualClient.listener;
    };
    RealtimeWebSocketClient.prototype.heartbeat = function (immediate) {
        var _this = this;
        this.clearHeartbeat();
        this.pingTimeoutId = setTimeout(function () {
            (function () { return __awaiter(_this, void 0, void 0, function () {
                var e_6;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            if (!this.ws || this.ws.readyState !== WS_READY_STATE.OPEN) {
                                return [2];
                            }
                            this.lastPingSendTS = Date.now();
                            return [4, this.ping()];
                        case 1:
                            _a.sent();
                            this.pingFailed = 0;
                            this.pongTimeoutId = setTimeout(function () {
                                console.error('pong timed out');
                                if (_this.pongMissed < DEFAULT_PONG_MISS_TOLERANCE) {
                                    _this.pongMissed += 1;
                                    _this.heartbeat(true);
                                }
                                else {
                                    _this.initWebSocketConnection(true);
                                }
                            }, this.context.appConfig.realtimePongWaitTimeout);
                            return [3, 3];
                        case 2:
                            e_6 = _a.sent();
                            if (this.pingFailed < DEFAULT_PING_FAIL_TOLERANCE) {
                                this.pingFailed += 1;
                                this.heartbeat();
                            }
                            else {
                                this.close(CloseEventCode.HeartbeatPingError);
                            }
                            return [3, 3];
                        case 3: return [2];
                    }
                });
            }); })();
        }, immediate ? 0 : this.context.appConfig.realtimePingInterval);
    };
    return RealtimeWebSocketClient;
}());
export { RealtimeWebSocketClient };
//# sourceMappingURL=data:application/json;base64,