"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeRequest = void 0;
var adapter_interface_1 = require("@cloudbase/adapter-interface");
var ws_1 = __importDefault(require("ws"));
var utilities_1 = require("@cloudbase/utilities");
var node_stream_1 = require("node:stream");
var _a = utilities_1.utils, isFormData = _a.isFormData, toQueryString = _a.toQueryString;
function dynamicImport(url, cb) {
    var _this = this;
    var ret;
    return function () { return __awaiter(_this, void 0, void 0, function () {
        var importRes;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (ret) {
                        return [2 /*return*/, ret];
                    }
                    return [4 /*yield*/, import(url)];
                case 1:
                    importRes = (_a.sent());
                    ret = cb(importRes);
                    return [2 /*return*/, ret];
            }
        });
    }); };
}
var importFetch = dynamicImport("node-fetch", function (x) { return x.default; });
var NodeRequest = /** @class */ (function () {
    function NodeRequest(config) {
        var timeout = config.timeout, timeoutMsg = config.timeoutMsg, restrictedMethods = config.restrictedMethods;
        this.timeout = timeout || 0;
        this.timeoutMsg = timeoutMsg || "请求超时";
        this.restrictedMethods = restrictedMethods || [
            "get",
            "post",
            "upload",
            "download",
        ];
    }
    NodeRequest.prototype.get = function (options) {
        return this.request(__assign(__assign({}, options), { method: "get" }), this.restrictedMethods.includes("get"));
    };
    NodeRequest.prototype.post = function (options) {
        return this.request(__assign(__assign({}, options), { method: "post" }), this.restrictedMethods.includes("post"));
    };
    NodeRequest.prototype.put = function (options) {
        return this.request(__assign(__assign({}, options), { method: "put" }));
    };
    NodeRequest.prototype.upload = function (options) {
        var _a;
        var _data = options.data, file = options.file, name = options.name, method = options.method, _b = options.headers, headers = _b === void 0 ? {} : _b;
        if (file === undefined || name == undefined) {
            throw new Error("file and name is required");
        }
        var data = obj2StrRecord(_data !== null && _data !== void 0 ? _data : {}), loweredMethod = method === null || method === void 0 ? void 0 : method.toLowerCase(), reqMethod = (_a = ["post", "put"].find(function (m) { return m === loweredMethod; })) !== null && _a !== void 0 ? _a : "put", 
        // 上传方式为post时，需转换为FormData
        formData = new FormData();
        if (reqMethod === "post") {
            Object.keys(data).forEach(function (key) {
                formData.append(key, data[key]);
            });
            formData.append("key", name);
            formData.append("file", file);
            return this.request(__assign(__assign({}, options), { data: formData, method: reqMethod }), this.restrictedMethods.includes("upload"));
        }
        return this.request(__assign(__assign({}, options), { method: "put", headers: headers, body: file }), this.restrictedMethods.includes("upload"));
    };
    NodeRequest.prototype.download = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var data, url, fileName, link;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.get(__assign(__assign({}, options), { headers: {}, responseType: "blob" }))];
                    case 1:
                        data = (_b.sent()).data;
                        url = window.URL.createObjectURL(new Blob([data]));
                        fileName = decodeURIComponent(new URL((_a = options === null || options === void 0 ? void 0 : options.url) !== null && _a !== void 0 ? _a : "").pathname.split("/").pop() || "");
                        link = document.createElement("a");
                        link.href = url;
                        link.setAttribute("download", fileName);
                        link.style.display = "none";
                        document.body.appendChild(link);
                        link.click();
                        // 回收内存
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(link);
                        return [2 /*return*/, new Promise(function (resolve) {
                                resolve({
                                    statusCode: 200,
                                    tempFilePath: options.url,
                                });
                            })];
                }
            });
        });
    };
    NodeRequest.prototype.fetch = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var url, _a, enableAbort, _b, stream, abortController, timer, res, ret;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        url = options.url, _a = options.enableAbort, enableAbort = _a === void 0 ? false : _a, _b = options.stream, stream = _b === void 0 ? false : _b, abortController = new AbortController();
                        timer = undefined;
                        if (enableAbort && this.timeout) {
                            timer = setTimeout(function () {
                                console.warn(_this.timeoutMsg);
                                abortController.abort(new Error(_this.timeoutMsg));
                            }, this.timeout);
                        }
                        return [4 /*yield*/, importFetch()];
                    case 1: return [4 /*yield*/, (_c.sent())(url, __assign(__assign({}, options), { headers: options.headers
                                ? headersInit2Indexable(options.headers)
                                : undefined, body: options.body, signal: abortController.signal }))
                            .then(function (x) {
                            clearTimeout(timer);
                            return x;
                        })
                            .catch(function (x) {
                            clearTimeout(timer);
                            return Promise.reject(x);
                        })];
                    case 2:
                        res = _c.sent();
                        ret = {
                            data: stream
                                ? res.body
                                    ? node_stream_1.Readable.toWeb(res.body)
                                    : res.body
                                : res.json(),
                            statusCode: res.status,
                            header: res.headers,
                        };
                        return [2 /*return*/, ret];
                }
            });
        });
    };
    NodeRequest.prototype.request = function (options_1) {
        return __awaiter(this, arguments, void 0, function (options, enableAbort) {
            var url, _a, _headers, data, responseType, withCredentials, body, _method, headers, method, realUrl, controller, signal, timer, payload, requestOptions, response, result_1, _b, _c, _1, _d, _e, headers_1;
            var _this = this;
            if (enableAbort === void 0) { enableAbort = false; }
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        url = options.url, _a = options.headers, _headers = _a === void 0 ? {} : _a, data = options.data, responseType = options.responseType, withCredentials = options.withCredentials, body = options.body, _method = options.method, headers = obj2StrRecord(_headers), method = String(_method).toLowerCase() || "get", realUrl = (0, adapter_interface_1.formatUrl)("https", url !== null && url !== void 0 ? url : "", method === "get" ? data : {}), controller = new AbortController(), signal = controller.signal;
                        if (enableAbort && this.timeout) {
                            timer = setTimeout(function () {
                                console.warn(_this.timeoutMsg);
                                controller.abort(new Error(_this.timeoutMsg));
                            }, this.timeout);
                        }
                        if (isFormData(data)) {
                            // FormData，不处理
                            payload = data;
                        }
                        else if (headers["content-type"] === "application/x-www-form-urlencoded") {
                            payload = toQueryString(data !== null && data !== void 0 ? data : {});
                        }
                        else if (body) {
                            payload = body;
                        }
                        else {
                            // 其它情况
                            payload = data ? JSON.stringify(data) : undefined;
                        }
                        requestOptions = {
                            method: method,
                            headers: headers,
                            body: payload,
                            credentials: withCredentials ? "include" : "same-origin",
                            signal: signal,
                        };
                        _f.label = 1;
                    case 1:
                        _f.trys.push([1, , 15, 16]);
                        return [4 /*yield*/, importFetch()];
                    case 2: return [4 /*yield*/, (_f.sent())(realUrl, requestOptions)];
                    case 3:
                        response = _f.sent(), result_1 = {
                            header: {},
                            statusCode: response.status,
                        };
                        _f.label = 4;
                    case 4:
                        _f.trys.push([4, 9, , 14]);
                        // 上传post请求返回数据格式为xml，此处容错
                        _b = result_1;
                        if (!(responseType === "blob")) return [3 /*break*/, 6];
                        return [4 /*yield*/, response.blob()];
                    case 5:
                        _c = _f.sent();
                        return [3 /*break*/, 8];
                    case 6: return [4 /*yield*/, response.json()];
                    case 7:
                        _c = _f.sent();
                        _f.label = 8;
                    case 8:
                        // 上传post请求返回数据格式为xml，此处容错
                        _b.data = _c;
                        return [3 /*break*/, 14];
                    case 9:
                        _1 = _f.sent();
                        _d = result_1;
                        if (!(responseType === "blob")) return [3 /*break*/, 11];
                        return [4 /*yield*/, response.blob()];
                    case 10:
                        _e = _f.sent();
                        return [3 /*break*/, 13];
                    case 11: return [4 /*yield*/, response.text()];
                    case 12:
                        _e = _f.sent();
                        _f.label = 13;
                    case 13:
                        _d.data = _e;
                        return [3 /*break*/, 14];
                    case 14:
                        headers_1 = response.headers;
                        headers_1.forEach(function (val, key) { return (result_1.header[key.toLowerCase()] = val); });
                        return [2 /*return*/, result_1];
                    case 15:
                        clearTimeout(timer);
                        return [7 /*endfinally*/];
                    case 16: return [2 /*return*/];
                }
            });
        });
    };
    return NodeRequest;
}());
exports.NodeRequest = NodeRequest;
/**
 * 判断当前环境是否为 Node.js 环境
 */
function isMatch() {
    return (typeof process !== "undefined" &&
        process.versions != null &&
        process.versions.node != null);
}
var storage = (function () {
    var db = new Map();
    return {
        mode: "sync",
        setItem: function (key, value) {
            db.set(key, value);
        },
        getItem: function (key) {
            return db.get(key);
        },
        removeItem: function (key) {
            db.delete(key);
        },
        clear: function () {
            db.clear();
        },
    };
})();
function genAdapter() {
    // 小程序无sessionStorage
    var adapter = {
        root: {},
        reqClass: NodeRequest,
        wsClass: ws_1.default,
        sessionStorage: storage,
        primaryStorage: adapter_interface_1.StorageType.session,
    };
    return adapter;
}
var adapter = {
    genAdapter: genAdapter,
    isMatch: isMatch,
    runtime: "node",
};
exports.default = adapter;
function obj2StrRecord(obj) {
    return Object.entries(obj).reduce(function (acc, cur) {
        var key = cur[0], value = cur[1];
        acc[key] = String(value);
        return acc;
    }, {});
}
function headersInit2Indexable(h) {
    if (isHeaders(h)) {
        var ret_1 = {};
        h.forEach(function (val, key) {
            ret_1[key] = val;
        });
        return ret_1;
    }
    return h;
    function isHeaders(h) {
        return h instanceof Headers;
    }
}
module.exports = adapter;
module.exports.default = adapter;
