export const deepClone = (value) => {
    const clone = (copiedValue) => {
        for (const key in value) {
            if (value.hasOwnProperty(key)) {
                copiedValue[key] = deepClone(value[key]);
            }
        }
        return copiedValue;
    };
    const type = value === null || value === undefined ? 'NullOrUndefined' : Object.prototype.toString.call(value).slice(8, -1);
    if ([
        'Int8Array',
        'Uint8Array',
        'Uint8ClampedArray',
        'Int16Array',
        'Uint16Array',
        'Int32Array',
        'Uint32Array',
        'Float32Array',
        'Float64Array',
        'BigInt64Array',
        'BigUint64Array',
    ].includes(type)) {
        return value.slice();
    }
    switch (type) {
        case 'Object':
            return clone(Object.create(Object.getPrototypeOf(value)));
        case 'Array':
            return clone([]);
        case 'Date':
            return new Date(value.valueOf());
        case 'RegExp':
            return new RegExp(value.source, (value.global ? 'g' : '')
                + (value.ignoreCase ? 'i' : '')
                + (value.multiline ? 'm' : '')
                + (value.sticky ? 'y' : '')
                + (value.unicode ? 'u' : ''));
        default:
            return value;
    }
};
export const getPathName = (url) => {
    const regex = /^(?:http(s)?:\/\/[^\/]+)?(\/[^\?#]*)/;
    const match = url.match(regex);
    if (match) {
        return match[2] || '';
    }
    return '';
};
