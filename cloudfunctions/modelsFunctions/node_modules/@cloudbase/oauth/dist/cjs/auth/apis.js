'use strict';
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Auth = void 0;
var consts_1 = require("./consts");
var oauth2client_1 = require("../oauth2client/oauth2client");
var captcha_1 = require("../captcha/captcha");
var utils_1 = require("../utils");
function getEncryptUtils(isEncrypt) {
    if (globalThis.IS_MP_BUILD) {
        return;
    }
    if (isEncrypt) {
        var utils = require('../utils/encrypt');
        return utils;
    }
}
var Auth = (function () {
    function Auth(opts) {
        var request = opts.request;
        var oAuth2Client = opts.credentialsClient;
        if (!oAuth2Client) {
            var initOptions = {
                apiOrigin: opts.apiOrigin,
                clientId: opts.clientId,
                storage: opts.storage,
                env: opts.env,
                baseRequest: opts.baseRequest,
                anonymousSignInFunc: opts.anonymousSignInFunc,
                wxCloud: opts.wxCloud,
            };
            oAuth2Client = new oauth2client_1.OAuth2Client(initOptions);
        }
        if (!request) {
            var baseRequest = oAuth2Client.request.bind(oAuth2Client);
            var captcha = new captcha_1.Captcha(__assign({ clientId: opts.clientId, request: baseRequest, storage: opts.storage }, opts.captchaOptions));
            request = captcha.request.bind(captcha);
        }
        this.config = {
            env: opts.env,
            apiOrigin: opts.apiOrigin,
            clientId: opts.clientId,
            request: request,
            credentialsClient: oAuth2Client,
            storage: opts.storage || oauth2client_1.defaultStorage,
        };
    }
    Auth.parseParamsToSearch = function (params) {
        Object.keys(params).forEach(function (key) {
            if (!params[key]) {
                delete params[key];
            }
        });
        var searchParams = new URLSearchParams(params);
        return searchParams.toString();
    };
    Auth.prototype.getParamsByVersion = function (params, key) {
        var _a;
        var paramsTemp = (0, utils_1.deepClone)(params);
        var url = ((_a = { v2: consts_1.ApiUrlsV2 }[paramsTemp === null || paramsTemp === void 0 ? void 0 : paramsTemp.version]) === null || _a === void 0 ? void 0 : _a[key]) || consts_1.ApiUrls[key];
        if (paramsTemp) {
            delete paramsTemp.version;
        }
        return { params: paramsTemp, url: url };
    };
    Auth.prototype.signIn = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var version, res, body, credentials;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        version = params.version || 'v1';
                        res = this.getParamsByVersion(params, 'AUTH_SIGN_IN_URL');
                        if (res.params.query) {
                            delete res.params.query;
                        }
                        return [4, this.getEncryptParams(res.params)];
                    case 1:
                        body = _a.sent();
                        return [4, this.config.request(res.url, {
                                method: 'POST',
                                body: body,
                            })];
                    case 2:
                        credentials = _a.sent();
                        return [4, this.config.credentialsClient.setCredentials(__assign(__assign({}, credentials), { version: version }))];
                    case 3:
                        _a.sent();
                        return [2, Promise.resolve(credentials)];
                }
            });
        });
    };
    Auth.prototype.signInAnonymously = function (data) {
        if (data === void 0) { data = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var credentials;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.config.request(consts_1.ApiUrls.AUTH_SIGN_IN_ANONYMOUSLY_URL, {
                            method: 'POST',
                            body: data,
                        })];
                    case 1:
                        credentials = _a.sent();
                        return [4, this.config.credentialsClient.setCredentials(credentials)];
                    case 2:
                        _a.sent();
                        return [2, Promise.resolve(credentials)];
                }
            });
        });
    };
    Auth.prototype.signUp = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.config.request(consts_1.ApiUrls.AUTH_SIGN_UP_URL, {
                            method: 'POST',
                            body: params,
                        })];
                    case 1:
                        data = _a.sent();
                        return [4, this.config.credentialsClient.setCredentials(data)];
                    case 2:
                        _a.sent();
                        return [2, Promise.resolve(data)];
                }
            });
        });
    };
    Auth.prototype.signOut = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var resp, err_1, accessToken, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resp = {};
                        if (!params) return [3, 6];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4, this.config.request(consts_1.ApiUrls.AUTH_SIGNOUT_URL, {
                                method: 'POST',
                                withCredentials: true,
                                body: params,
                            })];
                    case 2:
                        resp = _a.sent();
                        return [3, 4];
                    case 3:
                        err_1 = _a.sent();
                        if (err_1.error !== consts_1.ErrorType.UNAUTHENTICATED) {
                            console.log('sign_out_error', err_1);
                        }
                        return [3, 4];
                    case 4: return [4, this.config.credentialsClient.setCredentials()];
                    case 5:
                        _a.sent();
                        return [2, resp];
                    case 6: return [4, this.config.credentialsClient.getAccessToken()];
                    case 7:
                        accessToken = _a.sent();
                        return [4, this.config.request(consts_1.ApiUrls.AUTH_REVOKE_URL, {
                                method: 'POST',
                                body: {
                                    token: accessToken,
                                },
                            })];
                    case 8:
                        data = _a.sent();
                        return [4, this.config.credentialsClient.setCredentials()];
                    case 9:
                        _a.sent();
                        return [2, Promise.resolve(data)];
                }
            });
        });
    };
    Auth.prototype.revokeAllDevices = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.config.request(consts_1.ApiUrls.AUTH_REVOKE_ALL_URL, {
                            method: 'DELETE',
                            withCredentials: true,
                        })];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    Auth.prototype.revokeDevice = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.config.request(consts_1.ApiUrls.AUTHORIZED_DEVICES_DELETE_URL + params.device_id, {
                            method: 'DELETE',
                            withCredentials: true,
                        })];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    Auth.prototype.getVerification = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var withCredentials, hasLogin;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        withCredentials = false;
                        if (!(params.target === 'CUR_USER')) return [3, 1];
                        withCredentials = true;
                        return [3, 3];
                    case 1: return [4, this.hasLoginState()];
                    case 2:
                        hasLogin = _a.sent();
                        if (hasLogin) {
                            withCredentials = true;
                        }
                        _a.label = 3;
                    case 3: return [2, this.config.request(consts_1.ApiUrls.VERIFICATION_URL, {
                            method: 'POST',
                            body: params,
                            withCredentials: withCredentials,
                        })];
                }
            });
        });
    };
    Auth.prototype.verify = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        res = this.getParamsByVersion(params, 'VERIFY_URL');
                        return [4, this.config.request(res.url, {
                                method: 'POST',
                                body: res.params,
                            })];
                    case 1:
                        data = _a.sent();
                        if (!((params === null || params === void 0 ? void 0 : params.version) === 'v2')) return [3, 3];
                        return [4, this.config.credentialsClient.setCredentials(__assign(__assign({}, data), { version: 'v2' }))];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2, data];
                }
            });
        });
    };
    Auth.prototype.genProviderRedirectUri = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var redirect_uri, _a, otherParams, restParams, url;
            return __generator(this, function (_b) {
                redirect_uri = params.provider_redirect_uri, _a = params.other_params, otherParams = _a === void 0 ? {} : _a, restParams = __rest(params, ["provider_redirect_uri", "other_params"]);
                if (redirect_uri && !restParams.redirect_uri) {
                    restParams.redirect_uri = redirect_uri;
                }
                url = "".concat(consts_1.ApiUrls.PROVIDER_URI_URL, "?").concat(Auth.parseParamsToSearch(restParams));
                Object.keys(otherParams).forEach(function (key) {
                    var value = otherParams[key];
                    if (key === 'sign_out_uri' && !((value === null || value === void 0 ? void 0 : value.length) > 0)) {
                        return;
                    }
                    url += "&other_params[".concat(key, "]=").concat(encodeURIComponent(value));
                });
                return [2, this.config.request(url, {
                        method: 'GET',
                    })];
            });
        });
    };
    Auth.prototype.grantProviderToken = function (params, useWxCloud) {
        if (useWxCloud === void 0) { useWxCloud = false; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request(consts_1.ApiUrls.PROVIDER_TOKEN_URL, {
                        method: 'POST',
                        body: params,
                        useWxCloud: useWxCloud,
                    })];
            });
        });
    };
    Auth.prototype.patchProviderToken = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request(consts_1.ApiUrls.PROVIDER_TOKEN_URL, {
                        method: 'PATCH',
                        body: params,
                    })];
            });
        });
    };
    Auth.prototype.signInWithProvider = function (params, useWxCloud) {
        if (useWxCloud === void 0) { useWxCloud = false; }
        return __awaiter(this, void 0, void 0, function () {
            var res, credentials;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        res = this.getParamsByVersion(params, 'AUTH_SIGN_IN_WITH_PROVIDER_URL');
                        return [4, this.config.request(res.url, {
                                method: 'POST',
                                body: res.params,
                                useWxCloud: useWxCloud,
                            })];
                    case 1:
                        credentials = _a.sent();
                        return [4, this.config.credentialsClient.setCredentials(__assign(__assign({}, credentials), { version: (params === null || params === void 0 ? void 0 : params.version) || 'v1' }))];
                    case 2:
                        _a.sent();
                        return [2, Promise.resolve(credentials)];
                }
            });
        });
    };
    Auth.prototype.signInWithWechat = function (params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var credentials;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.config.request(consts_1.ApiUrls.AUTH_SIGN_IN_WITH_WECHAT_URL, {
                            method: 'POST',
                            body: params,
                        })];
                    case 1:
                        credentials = _a.sent();
                        return [4, this.config.credentialsClient.setCredentials(credentials)];
                    case 2:
                        _a.sent();
                        return [2, Promise.resolve(credentials)];
                }
            });
        });
    };
    Auth.prototype.bindWithProvider = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request(consts_1.ApiUrls.PROVIDER_BIND_URL, {
                        method: 'POST',
                        body: params,
                        withCredentials: true,
                    })];
            });
        });
    };
    Auth.prototype.getUserProfile = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.getUserInfo(params)];
            });
        });
    };
    Auth.prototype.getUserInfo = function (params) {
        var _a;
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var res, searchParams, userInfo;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        res = this.getParamsByVersion(params, 'USER_ME_URL');
                        if ((_a = res.params) === null || _a === void 0 ? void 0 : _a.query) {
                            searchParams = new URLSearchParams(res.params.query);
                            res.url += "?".concat(searchParams.toString());
                        }
                        return [4, this.config.request(res.url, {
                                method: 'GET',
                                withCredentials: true,
                            })];
                    case 1:
                        userInfo = _b.sent();
                        if (userInfo.sub) {
                            userInfo.uid = userInfo.sub;
                        }
                        return [2, userInfo];
                }
            });
        });
    };
    Auth.prototype.getWedaUserInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var userInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.config.request(consts_1.ApiUrls.WEDA_USER_URL, {
                            method: 'GET',
                            withCredentials: true,
                        })];
                    case 1:
                        userInfo = _a.sent();
                        return [2, userInfo];
                }
            });
        });
    };
    Auth.prototype.deleteMe = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res, url;
            return __generator(this, function (_a) {
                res = this.getParamsByVersion(params, 'USER_ME_URL');
                url = "".concat(res.url, "?").concat(Auth.parseParamsToSearch(res.params));
                return [2, this.config.request(url, {
                        method: 'DELETE',
                        withCredentials: true,
                    })];
            });
        });
    };
    Auth.prototype.hasLoginState = function () {
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, this.config.credentialsClient.getAccessToken()];
                    case 1:
                        _a.sent();
                        return [2, true];
                    case 2:
                        error_1 = _a.sent();
                        return [2, false];
                    case 3: return [2];
                }
            });
        });
    };
    Auth.prototype.hasLoginStateSync = function () {
        var credentials = this.config.credentialsClient.getCredentialsSync();
        return credentials;
    };
    Auth.prototype.getLoginState = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.credentialsClient.getCredentialsAsync()];
            });
        });
    };
    Auth.prototype.transByProvider = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request(consts_1.ApiUrls.USER_TRANS_BY_PROVIDER_URL, {
                        method: 'PATCH',
                        body: params,
                        withCredentials: true,
                    })];
            });
        });
    };
    Auth.prototype.grantToken = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                res = this.getParamsByVersion(params, 'AUTH_TOKEN_URL');
                return [2, this.config.request(res.url, {
                        method: 'POST',
                        body: res.params,
                    })];
            });
        });
    };
    Auth.prototype.getProviders = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request(consts_1.ApiUrls.PROVIDER_LIST, {
                        method: 'GET',
                        withCredentials: true,
                    })];
            });
        });
    };
    Auth.prototype.unbindProvider = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request("".concat(consts_1.ApiUrls.PROVIDER_UNBIND_URL, "/").concat(params.provider_id), {
                        method: 'DELETE',
                        withCredentials: true,
                    })];
            });
        });
    };
    Auth.prototype.checkPassword = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request("".concat(consts_1.ApiUrls.CHECK_PWD_URL), {
                        method: 'POST',
                        withCredentials: true,
                        body: params,
                    })];
            });
        });
    };
    Auth.prototype.editContact = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request("".concat(consts_1.ApiUrls.BIND_CONTACT_URL), {
                        method: 'PATCH',
                        withCredentials: true,
                        body: params,
                    })];
            });
        });
    };
    Auth.prototype.setPassword = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request("".concat(consts_1.ApiUrls.AUTH_SET_PASSWORD), {
                        method: 'PATCH',
                        withCredentials: true,
                        body: params,
                    })];
            });
        });
    };
    Auth.prototype.updatePasswordByOld = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var sudoToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.sudo({ password: params.old_password })];
                    case 1:
                        sudoToken = _a.sent();
                        return [2, this.setPassword({
                                sudo_token: sudoToken.sudo_token,
                                new_password: params.new_password,
                            })];
                }
            });
        });
    };
    Auth.prototype.sudo = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request("".concat(consts_1.ApiUrls.SUDO_URL), {
                        method: 'POST',
                        withCredentials: true,
                        body: params,
                    })];
            });
        });
    };
    Auth.prototype.sendVerificationCodeToCurrentUser = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                params.target = 'CUR_USER';
                return [2, this.config.request(consts_1.ApiUrls.VERIFICATION_URL, {
                        method: 'POST',
                        body: params,
                        withCredentials: true,
                        withCaptcha: true,
                    })];
            });
        });
    };
    Auth.prototype.changeBoundProvider = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request("".concat(consts_1.ApiUrls.PROVIDER_LIST, "/").concat(params.provider_id, "/trans"), {
                        method: 'POST',
                        body: {
                            provider_trans_token: params.trans_token,
                        },
                        withCredentials: true,
                    })];
            });
        });
    };
    Auth.prototype.setUserProfile = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request(consts_1.ApiUrls.USER_PRIFILE_URL, {
                        method: 'PATCH',
                        body: params,
                        withCredentials: true,
                    })];
            });
        });
    };
    Auth.prototype.updateUserBasicInfo = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request(consts_1.ApiUrls.USER_BASIC_EDIT_URL, {
                        method: 'POST',
                        withCredentials: true,
                        body: params,
                    })];
            });
        });
    };
    Auth.prototype.queryUserProfile = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var searchParams;
            return __generator(this, function (_a) {
                searchParams = new URLSearchParams(params);
                return [2, this.config.request("".concat(consts_1.ApiUrls.USER_QUERY_URL, "?").concat(searchParams.toString()), {
                        method: 'GET',
                        withCredentials: true,
                    })];
            });
        });
    };
    Auth.prototype.setCustomSignFunc = function (getTickFn) {
        this.getCustomSignTicketFn = getTickFn;
    };
    Auth.prototype.signInWithCustomTicket = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var customSignTicketFn, customTicket;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        customSignTicketFn = this.getCustomSignTicketFn;
                        if (!customSignTicketFn) {
                            return [2, Promise.reject({
                                    error: 'failed_precondition',
                                    error_description: 'please use setCustomSignFunc to set custom sign function',
                                })];
                        }
                        return [4, customSignTicketFn()];
                    case 1:
                        customTicket = _a.sent();
                        return [2, this.signInWithProvider(__assign(__assign({}, params), { provider_id: 'custom', provider_token: customTicket }))];
                }
            });
        });
    };
    Auth.prototype.resetPassword = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request(consts_1.ApiUrls.AUTH_RESET_PASSWORD, {
                        method: 'POST',
                        body: params,
                    })];
            });
        });
    };
    Auth.prototype.authorize = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request(consts_1.ApiUrls.AUTHORIZE_URL, {
                        method: 'POST',
                        withCredentials: true,
                        body: params,
                    })];
            });
        });
    };
    Auth.prototype.authorizeDevice = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request(consts_1.ApiUrls.AUTHORIZE_DEVICE_URL, {
                        method: 'POST',
                        withCredentials: true,
                        body: params,
                    })];
            });
        });
    };
    Auth.prototype.deviceAuthorize = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request(consts_1.ApiUrls.AUTH_GET_DEVICE_CODE, {
                        method: 'POST',
                        body: params,
                        withCredentials: true,
                    })];
            });
        });
    };
    Auth.prototype.authorizeInfo = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var url, withBasicAuth, withCredentials, hasLogin;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "".concat(consts_1.ApiUrls.AUTHORIZE_INFO_URL, "?").concat(Auth.parseParamsToSearch(params));
                        withBasicAuth = true;
                        withCredentials = false;
                        return [4, this.hasLoginState()];
                    case 1:
                        hasLogin = _a.sent();
                        if (hasLogin) {
                            withCredentials = true;
                            withBasicAuth = false;
                        }
                        return [2, this.config.request(url, {
                                method: 'GET',
                                withBasicAuth: withBasicAuth,
                                withCredentials: withCredentials,
                            })];
                }
            });
        });
    };
    Auth.prototype.checkUsername = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request(consts_1.ApiUrls.CHECK_USERNAME, {
                        method: 'GET',
                        body: params,
                        withCredentials: true,
                    })];
            });
        });
    };
    Auth.prototype.checkIfUserExist = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var searchParams;
            return __generator(this, function (_a) {
                searchParams = new URLSearchParams(params);
                return [2, this.config.request("".concat(consts_1.ApiUrls.CHECK_IF_USER_EXIST, "?").concat(searchParams.toString()), {
                        method: 'GET',
                    })];
            });
        });
    };
    Auth.prototype.loginScope = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.credentialsClient.getScope()];
            });
        });
    };
    Auth.prototype.loginGroups = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.credentialsClient.getGroups()];
            });
        });
    };
    Auth.prototype.refreshTokenForce = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var credentials;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.config.credentialsClient.getCredentials()];
                    case 1:
                        credentials = _a.sent();
                        return [4, this.config.credentialsClient.refreshToken(__assign(__assign({}, credentials), { version: (params === null || params === void 0 ? void 0 : params.version) || 'v1' }))];
                    case 2: return [2, _a.sent()];
                }
            });
        });
    };
    Auth.prototype.getCredentials = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.credentialsClient.getCredentials()];
            });
        });
    };
    Auth.prototype.getPublicKey = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request(consts_1.ApiUrlsV2.AUTH_PUBLIC_KEY, {
                        method: 'POST',
                        body: {},
                    })];
            });
        });
    };
    Auth.prototype.getEncryptParams = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var isEncrypt, payload, encryptUtils, publicKey, public_key_thumbprint, res, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        isEncrypt = params.isEncrypt;
                        delete params.isEncrypt;
                        payload = (0, utils_1.deepClone)(params);
                        encryptUtils = getEncryptUtils(isEncrypt);
                        if (!encryptUtils) {
                            return [2, params];
                        }
                        publicKey = '';
                        public_key_thumbprint = '';
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4, this.getPublicKey()];
                    case 2:
                        res = _a.sent();
                        publicKey = res.public_key;
                        public_key_thumbprint = res.public_key_thumbprint;
                        return [3, 4];
                    case 3:
                        error_2 = _a.sent();
                        return [3, 4];
                    case 4:
                        if (!publicKey || !public_key_thumbprint) {
                            throw new Error('public_key or public_key_thumbprint is empty');
                        }
                        return [2, {
                                params: encryptUtils.getEncryptInfo({ publicKey: publicKey, payload: payload }),
                                public_key_thumbprint: public_key_thumbprint,
                            }];
                }
            });
        });
    };
    Auth.prototype.getProviderSubType = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request(consts_1.ApiUrls.GET_PROVIDER_TYPE, {
                        method: 'POST',
                        body: {
                            provider_id: 'weda',
                        },
                    })];
            });
        });
    };
    Auth.prototype.verifyCaptchaData = function (_a) {
        var token = _a.token, key = _a.key;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2, this.config.request(consts_1.ApiUrls.VERIFY_CAPTCHA_DATA_URL, {
                        method: 'POST',
                        body: { token: token, key: key },
                        withCredentials: false,
                    })];
            });
        });
    };
    Auth.prototype.createCaptchaData = function (_a) {
        var state = _a.state, _b = _a.redirect_uri, redirect_uri = _b === void 0 ? undefined : _b;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_c) {
                return [2, this.config.request(consts_1.ApiUrls.CAPTCHA_DATA_URL, {
                        method: 'POST',
                        body: { state: state, redirect_uri: redirect_uri },
                        withCredentials: false,
                    })];
            });
        });
    };
    Auth.prototype.getMiniProgramCode = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request(consts_1.ApiUrls.GET_MINIPROGRAM_QRCODE, {
                        method: 'POST',
                        body: params,
                    })];
            });
        });
    };
    Auth.prototype.getMiniProgramQrCodeStatus = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.config.request(consts_1.ApiUrls.GET_MINIPROGRAM_QRCODE_STATUS, {
                        method: 'POST',
                        body: params,
                    })];
            });
        });
    };
    Auth.prototype.getUserBehaviorLog = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var action, url;
            return __generator(this, function (_a) {
                action = { LOGIN: 'query[action]=USER_LOGIN', MODIFY: 'ne_query[action]=USER_LOGIN' };
                url = "".concat(consts_1.ApiUrls.GET_USER_BEHAVIOR_LOG, "?").concat(action[params.type], "&limit=").concat(params.limit).concat(params.page_token ? "&page_token=".concat(params.page_token) : '');
                return [2, this.config.request(url, {
                        method: 'GET',
                        withCredentials: true,
                    })];
            });
        });
    };
    Auth.prototype.modifyPassword = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var publicKey, public_key_thumbprint, encryptUtils, res, error_3, encrypt_password, encrypt_new_password;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        publicKey = '';
                        public_key_thumbprint = '';
                        encryptUtils = getEncryptUtils(true);
                        if (!encryptUtils) {
                            throw new Error('do not support encrypt, a encrypt util required.');
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4, this.getPublicKey()];
                    case 2:
                        res = _a.sent();
                        publicKey = res.public_key;
                        public_key_thumbprint = res.public_key_thumbprint;
                        return [3, 4];
                    case 3:
                        error_3 = _a.sent();
                        return [3, 4];
                    case 4:
                        if (!publicKey || !public_key_thumbprint) {
                            throw new Error('public_key or public_key_thumbprint is empty');
                        }
                        encrypt_password = params.password ? encryptUtils.getEncryptInfo({ publicKey: publicKey, payload: params.password }) : '';
                        encrypt_new_password = encryptUtils.getEncryptInfo({ publicKey: publicKey, payload: params.new_password });
                        return [2, this.config.request(consts_1.ApiUrls.USER_BASIC_EDIT_URL, {
                                method: 'POST',
                                withCredentials: true,
                                body: {
                                    user_id: params.user_id,
                                    encrypt_password: encrypt_password,
                                    encrypt_new_password: encrypt_new_password,
                                    public_key_thumbprint: public_key_thumbprint,
                                },
                            })];
                }
            });
        });
    };
    Auth.prototype.modifyPasswordWithoutLogin = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var publicKey, public_key_thumbprint, encryptUtils, res, error_4, encrypt_password, encrypt_new_password;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        publicKey = '';
                        public_key_thumbprint = '';
                        encryptUtils = getEncryptUtils(true);
                        if (!encryptUtils) {
                            throw new Error('do not support encrypt, a encrypt util required.');
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4, this.getPublicKey()];
                    case 2:
                        res = _a.sent();
                        publicKey = res.public_key;
                        public_key_thumbprint = res.public_key_thumbprint;
                        return [3, 4];
                    case 3:
                        error_4 = _a.sent();
                        return [3, 4];
                    case 4:
                        if (!publicKey || !public_key_thumbprint) {
                            throw new Error('public_key or public_key_thumbprint is empty');
                        }
                        encrypt_password = params.password ? encryptUtils.getEncryptInfo({ publicKey: publicKey, payload: params.password }) : '';
                        encrypt_new_password = encryptUtils.getEncryptInfo({ publicKey: publicKey, payload: params.new_password });
                        return [2, this.config.request(consts_1.ApiUrlsV2.AUTH_RESET_PASSWORD, {
                                method: 'POST',
                                body: {
                                    username: params.username,
                                    password: encrypt_password,
                                    new_password: encrypt_new_password,
                                    public_key_thumbprint: public_key_thumbprint,
                                },
                            })];
                }
            });
        });
    };
    return Auth;
}());
exports.Auth = Auth;
//# sourceMappingURL=data:application/json;base64,