import { getSdkName } from '../constants';
export function isArray(val) {
    return Object.prototype.toString.call(val) === '[object Array]';
}
export function isString(val) {
    return typeof val === 'string';
}
export function isUndefined(val) {
    return typeof val === 'undefined';
}
export function isPalinObject(val) {
    return Object.prototype.toString.call(val) === '[object Object]';
}
export function isNull(val) {
    return Object.prototype.toString.call(val) === '[object Null]';
}
export function isInstanceOf(instance, construct) {
    return instance instanceof construct;
}
export function isFormData(val) {
    return Object.prototype.toString.call(val) === '[object FormData]';
}
export function genSeqId() {
    return Math.random().toString(16)
        .slice(2);
}
export function generateRequestId() {
    var d = new Date().getTime();
    var d2 = ((performance === null || performance === void 0 ? void 0 : performance.now) && (performance.now() * 1000)) || 0;
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16;
        if (d > 0) {
            r = (d + r) % 16 | 0;
            d = Math.floor(d / 16);
        }
        else {
            r = (d2 + r) % 16 | 0;
            d2 = Math.floor(d2 / 16);
        }
        return (c === 'x' ? r : ((r & 0x7) | 0x8)).toString(16);
    });
}
export function formatUrl(PROTOCOL, url, query) {
    if (query === void 0) { query = {}; }
    var urlHasQuery = /\?/.test(url);
    var queryString = '';
    Object.keys(query).forEach(function (key) {
        if (queryString === '') {
            !urlHasQuery && (url += '?');
        }
        else {
            queryString += '&';
        }
        queryString += "".concat(key, "=").concat(encodeURIComponent(query[key]));
    });
    url += queryString;
    if (/^http(s)?:\/\//.test(url)) {
        return url;
    }
    return "".concat(PROTOCOL).concat(url);
}
export function toQueryString(query) {
    if (query === void 0) { query = {}; }
    var queryString = [];
    Object.keys(query).forEach(function (key) {
        queryString.push("".concat(key, "=").concat(encodeURIComponent(query[key])));
    });
    return queryString.join('&');
}
export function getQuery(name, url) {
    if (typeof window === 'undefined') {
        return false;
    }
    var u = url || window.location.search;
    var reg = new RegExp("(^|&)".concat(name, "=([^&]*)(&|$)"));
    var r = u.substr(u.indexOf('?') + 1).match(reg);
    return (r !== null && r !== undefined) ? r[2] : '';
}
export var getHash = function (name) {
    if (typeof window === 'undefined') {
        return '';
    }
    var matches = window.location.hash.match(new RegExp("[#?&/]".concat(name, "=([^&#]*)")));
    return matches ? matches[1] : '';
};
export function removeParam(key, sourceURL) {
    var rtn = sourceURL.split('?')[0];
    var param;
    var params = [];
    var queryString = sourceURL.indexOf('?') !== -1 ? sourceURL.split('?')[1] : '';
    if (queryString !== '') {
        params = queryString.split('&');
        for (var i = params.length - 1; i >= 0; i -= 1) {
            param = params[i].split('=')[0];
            if (param === key) {
                params.splice(i, 1);
            }
        }
        rtn = "".concat(rtn, "?").concat(params.join('&'));
    }
    return rtn;
}
export function createPromiseCallback() {
    var cb;
    if (!Promise) {
        cb = function () { };
        cb.promise = {};
        var throwPromiseNotDefined = function () {
            throw new Error('Your Node runtime does support ES6 Promises. '
                + 'Set "global.Promise" to your preferred implementation of promises.');
        };
        Object.defineProperty(cb.promise, 'then', { get: throwPromiseNotDefined });
        Object.defineProperty(cb.promise, 'catch', { get: throwPromiseNotDefined });
        return cb;
    }
    var promise = new Promise(function (resolve, reject) {
        cb = function (err, data) {
            if (err)
                return reject(err);
            return resolve(data);
        };
    });
    cb.promise = promise;
    return cb;
}
export function execCallback(fn, err, data) {
    if (data === void 0) { data = null; }
    if (fn && typeof fn === 'function') {
        return fn(err, data);
    }
    if (err) {
        throw err;
    }
    return data;
}
export function printWarn(error, msg) {
    console.warn("[".concat(getSdkName(), "][").concat(error, "]:").concat(msg));
}
export function printError(error, msg) {
    console.error({
        code: error,
        msg: "[".concat(getSdkName(), "][").concat(error, "]:").concat(msg),
    });
}
export function printInfo(error, msg) {
    console.log("[".concat(getSdkName(), "][").concat(error, "]:").concat(msg));
}
export function throwError(error, msg) {
    throw new Error(JSON.stringify({
        code: error,
        msg: "[".concat(getSdkName(), "][").concat(error, "]:").concat(msg),
    }));
}
export function printGroupLog(options) {
    var title = options.title, _a = options.subtitle, subtitle = _a === void 0 ? '' : _a, _b = options.content, content = _b === void 0 ? [] : _b, _c = options.printTrace, printTrace = _c === void 0 ? false : _c, _d = options.collapsed, collapsed = _d === void 0 ? false : _d;
    if (collapsed) {
        console.groupCollapsed(title, subtitle);
    }
    else {
        console.group(title, subtitle);
    }
    for (var _i = 0, content_1 = content; _i < content_1.length; _i++) {
        var tip = content_1[_i];
        var type = tip.type, body = tip.body;
        switch (type) {
            case 'info':
                console.log(body);
                break;
            case 'warn':
                console.warn(body);
                break;
            case 'error':
                console.error(body);
                break;
        }
    }
    if (printTrace) {
        console.trace('stack trace:');
    }
    console.groupEnd();
}
export var sleep = function (ms) {
    if (ms === void 0) { ms = 0; }
    return new Promise(function (r) { return setTimeout(r, ms); });
};
export function transformPhone(phoneNumber) {
    return "+86".concat(phoneNumber);
}
//# sourceMappingURL=data:application/json;base64,