"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSpecificContext = void 0;
const common_context_1 = require("./common-context");
const tcb_1 = require("../tcb");
const json_transform_1 = require("../http-method/json-transform");
const normalize_http_method_1 = require("../http-method/normalize-http-method");
const common_1 = require("../common");
const config_1 = require("../config");
const httpAuthProvider = __importStar(require("../http-method/auth"));
/**
 * 数据源类型
 */
const HTTP_SOURCE_TYPES = [
    /** 0 empty */
    '',
    /** 1 腾讯文档 */
    'tencent-docs',
    /** 2 腾讯会议 */
    'tencent-meeting',
    /** 3 企业微信 */
    'weixin-work',
    /** 4 微信电商 */
    'weixin-shop',
    /** 5 腾讯地图 */
    'tencent-map',
    /** 6 微信支付 */
    'wechat-pay',
];
async function getSpecificContext(config) {
    const commonContext = (0, common_context_1.getCommonContext)();
    const vars = getVarsInfo(config);
    // 目前仅内建数据源才有数据库
    const hasDb = config.dataSource.type === 'database';
    const dataSourceFullName = (0, common_1.getDsFullName)(config.dataSource, commonContext === null || commonContext === void 0 ? void 0 : commonContext.env.isPreview);
    const envInfo = Object.assign({}, commonContext.env, {
        dataSourceName: config.dataSource.name,
        dataSourceFullName,
    });
    const getCollectionName = await (0, config_1.generateGetCollectionName)(commonContext === null || commonContext === void 0 ? void 0 : commonContext.env.isPreview);
    const cfContext = Object.assign({}, commonContext, {
        vars,
        getCollectionName,
        httpAuth: getAuthProvider(config.dataSource),
        env: envInfo,
        envInfo,
        dataSourceProfile: config.dataSource,
        defaultParams: (0, config_1.getDefaultParams)(config.dataSource.name),
        collection: hasDb ? tcb_1.db.collection(dataSourceFullName) : undefined,
    });
    return cfContext;
}
exports.getSpecificContext = getSpecificContext;
/**
 * 获取公共变量信息
 */
function getVarsInfo(config) {
    var _a, _b;
    if (!((_b = (_a = config.dataSource) === null || _a === void 0 ? void 0 : _a.configuration) === null || _b === void 0 ? void 0 : _b.vars))
        return {};
    return ((0, json_transform_1.transformJSONWithTemplate)({}, (0, normalize_http_method_1.convertHttpField2JsonTpl)(config.dataSource.configuration.vars)) || {});
}
function getAuthProvider(dsConfig) {
    var _a, _b;
    if (!dsConfig || dsConfig.type !== 'cloud-integration')
        return;
    // @ts-ignore
    const providerName = (dsConfig.source && HTTP_SOURCE_TYPES[dsConfig.source])
        || ((_a = dsConfig.configuration) === null || _a === void 0 ? void 0 : _a.provider)
        || ((_b = dsConfig.schema) === null || _b === void 0 ? void 0 : _b.provider);
    if (!providerName)
        return;
    // @ts-ignore
    const authProvider = providerName ? httpAuthProvider[(0, common_1.dash2smallCamelCase)(providerName)] : undefined;
    if (!authProvider)
        return;
    return Object.assign(Object.assign({}, authProvider), { getAuthData: authProvider.getAuthData.bind(null, dsConfig.id) });
}
