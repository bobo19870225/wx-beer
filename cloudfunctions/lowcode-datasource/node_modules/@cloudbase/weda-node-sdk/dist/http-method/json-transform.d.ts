/**
 将 JSON 按照模版转换为另一种结构
 如, 原始json
{
  user: 'Molly',
  age: 12,
  email: 'molly@gmail.com',
  location: {
    city: 'sz',
    street: 'shennan street',
    zipCode: '2323'
  },
  titles: [
    {
      title: '三好学生',
      date: '2017-11-23'
    },
    {
      title: '优秀干部',
      date: '2017-11-23'
    }
  ]
}
模版
{
  userName: '{{user}}',
  userLevel: 2,
  email: '{{email}}',
  location: {
    address: '{{location.city}} {{location.street}}',
    postCode: '{{location.zipCode}}'
  },
  rewards$titles$: {
    name: '{{$item.title}}',
    no: '{{$index + 1}}',
    releaseDate: '{{$item.date}}'
  }
}
转换得到
{
  userName: 'Molly',
  userLevel: 2,
  email: 'molly@gmail.com',
  location: {
    address: 'sz shennan street',
    postCode: '2323'
  },
  rewards: [
    {
      name: '三好学生',
      no: 1,
      releaseDate: '2017-11-23'
    },
    {
      name: '优秀干部',
      no: 1,
      releaseDate: '2017-11-23'
    }
  ]
}

 JSON Template 结构:
 1. 插值使用 {{}} 包裹, 可以直接访问json的值, 亦可以使用表达式
 2. 除数组外, 模版对象中的值均可用插值方式描述
 3. 数组转换时, 因需要同时描述需要循环的字段及值的结构, 描述方式会略有不同:
    循环字段在模版对象的键值中描述, 采用 key$loopKeyPath$ 形式
    值依旧使用插值方式来描述数组成员, 插值中可以使用 $item 访问循环的值, 使用 $index 访问循环索引
 */
export declare function evaluateCode(code: string, context: any): any;
/**
 * 判断字符串是否为属性路径
 *  如: abc
 *      abc.sss
 *      abc.ddd["xxxx"].sdf.iwe9
 *      abc.ddd["22"].sdf[90].iwe9
 *      abc.ddd["22"].sdf["90"].iwe9
 * 下边这种虽然是合理的变量路径, 但是模版中使用 getProp 处理解析路径较为复杂, 故判定为非路径
 *      abc.ddd["xxxx"].sdf.iwe9['xxx   sdf']
 *      abc.ddd["xxxx"].sdf.iwe9['xxx  "\'\'\'" sdf']
 */
export declare function isPropPath(propPath: string): boolean;
export declare function evaluateVal(val: string, context: object): any;
export declare function evaluateArr(template: string | object, json: object, keyPath: string): any[];
/**
 * get value from obj with key path(lodash.get alternative)
 * @param obj object to extract value from
 * @param keyPath value key path, e.g: a.b.c, a[0][3].s.d.e
 * @param defaultValue if get undefined, use defaultValue instead
 */
export declare function getProp(obj: any, keyPath: string | string[], defaultValue?: any): any;
export declare function transformJSONWithTemplate(json: object, template: Record<string, any> | string): any;
