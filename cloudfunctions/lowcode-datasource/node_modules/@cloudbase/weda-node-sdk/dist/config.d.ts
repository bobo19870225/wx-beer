import { IPlatformDataSource } from '@cloudbase/cals';
import { IWedaRequestParams } from '@cloudbase/cloud-api';
import { ICompleteCloudbaseContext } from '@cloudbase/node-sdk';
import { IUserSource } from './types';
export interface IPrivateInfo {
    isPrivate: boolean;
    tcbHost: string;
}
/** 公共配置信息 */
export interface IConfig {
    /** 获取所有数据源描述对象的方法, 由外部传入 */
    getDataSources: () => (Promise<IPlatformDataSource[]> | IPlatformDataSource[]);
    /** 是否为测试模式 */
    isTestMode: boolean;
    /** 当 isTestMode 为true 时则有该字段, 表示当前被测试的数据源描述信息 */
    testDataSource?: IPlatformDataSource | false;
    /** 调用入口信息 */
    entrance?: {
        /** 入口数据源名称 */
        dataSourceName: string;
        /** 入口数据源方法 */
        methodName: string;
    };
    /**
     * 函数默认值, 只针对入口数据源有效
     */
    defaultParams?: Record<string, any>;
    /**
     * 数据源云函数环境类型
     *  pre 预览环境
     *  prod 正式环境
     */
    envType?: IWedaRequestParams['envType'];
    /** weda 接入层地址 */
    wedaTarget?: string;
    /** 请求ID */
    requestId: string;
    /** 用户来源, 用于跨数据源调用时设置和获取其他云函数传递过来的用户来源信息 */
    userSource?: IUserSource;
    /** 微搭应用ID */
    wedaAppId?: string;
    wedaAccessToken?: string;
    privateInfo?: IPrivateInfo;
}
declare type IConfigKey = keyof IConfig;
/**
 * 设置配置, 应当只在 get-fn-context 中调用
 */
export declare function setConfig(cfg: Partial<IConfig>): void;
/**
 * 获取配置, !!! 调用前必须确保已经调用过 getFnContext !!!
 */
export declare function getConfig(): IConfig;
export declare function getConfig<K extends IConfigKey>(key: K): IConfig[K];
/** 生成获取数据源对应数据库名称的方法 */
export declare function generateGetCollectionName(isPreview?: boolean): Promise<(dsName: string) => string>;
interface IParsedContext extends ICompleteCloudbaseContext {
    WEDA_TOKEN?: string;
}
/**
 * 解析云函数的 context
 *  为保证能获取到完整的context信息, 应当保证在第一次调用时有传入 context
 * @param context tcb 云函数的context, 即 main 函数的第二个参数
 */
export declare function getCloudbaseContext(context?: any): IParsedContext;
/** 获取用户来源信息 */
export declare function getUserSource(): IUserSource | undefined;
/**
 * 获取数据源方法的默认参数
 *  同一个数据源下, 所有方法均共享同样的参数
 * @param dataSourceName 数据源名称
 */
export declare function getDefaultParams(dataSourceName: string): Record<string, any> | null;
/**
 * 当前方法是否处于测试模式中
 */
export declare function isMethodInTestMode(dataSourceName: string, methodName: string): boolean | undefined;
/**
 * 获取当前数据源描述对象
 *  若为测试模式, 则使用 config.testDataSource
 */
export declare function getDataSource(dataSource: IPlatformDataSource): import("@cloudbase/cals").IDatabaseDataSource | import("@cloudbase/cals").ICloudIntegrationDataSource;
/**
 * 数据源云函数调用来源的环境变量名, 也会作为回传时候的http header名
 */
export declare const TRIGGER_SOURCE_HEADER = "X-Trigger-Source";
/**
 * 获取当前数据源的调用来源
 *  为避免字母大小写转换问题, 在此尝试各种方式获取
 * @returns 当前调用来源
 */
export declare function getTriggerSource(): string | undefined;
export {};
