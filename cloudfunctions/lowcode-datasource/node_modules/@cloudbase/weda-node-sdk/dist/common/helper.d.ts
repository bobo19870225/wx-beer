import { IDsKeyInfo } from '../types';
/**
 * 是否使用的新的数据源内置方法命名
 */
export declare function isNewBuiltinName(name: string): boolean;
/** 是否为内置云函数 */
export declare function isBuiltinMethod(name: string): boolean;
export declare const isBuiltinMethodName: typeof isBuiltinMethod;
/**
 * 将数据源方法名称倒退回旧名称
 */
export declare function fallback2oldMethodName(name: string): string;
/**
 * 标准化内置云函数名称, 无 weda 前缀的增加 weda 前缀
 */
export declare function normalizeBuiltinMethodName(name: string): string;
/** 将字符串首字母大写 */
export declare function capitalize(str: string): string;
/**
 * 将对象的key的首字母转换为大写, 适应 yunapi 的命名风格
 *  { userName: 'xxx', id: 'xxx' } => { UserName: 'xxx', Id: 'xxxx'}
 */
export declare function capitalizeKey(obj: Record<string, any>): Record<string, any>;
/**
 * 将对象的 key 转换为全小写
 *  for http header usage
 */
export declare function lowercaseWholeKey(obj: Record<string, any>): Record<string, any>;
/**
 * 将对象的key的首字母转换为小写
 * { UserName: 'xxx', Id: 'xxxx'} => { userName: 'xxx', id: 'xxx' }
 * 默认只处理最外层, 若 deep 为 true, 则递归处理
 */
export declare function lowercaseKey(obj: any, deep?: boolean): any;
/**
 * 将破折号转换为小驼峰命名方式
 *  dash-name => dashName
 */
export declare function dash2smallCamelCase(str: string): string;
/**
 * 获取数据源完整名称, 该名称用于发布后的tcb云函数, 也用于tcb的数据库名称
 * @param ds 数据源关键信息
 * @param isPreview 是否预览
 * @returns 数据源表名
 */
export declare function getDsFullName(ds: Omit<IDsKeyInfo, 'type'>, isPreview?: boolean): string;
/**
 * Performs a deep merge of `source` into `target`.
 * Mutates `target` only but not its objects and arrays.
 *
 * @author inspired by [jhildenbiddle](https://stackoverflow.com/a/48218209).
 */
export declare function mergeDeep(target: any, source: any): any;
/** 是否为对象(非数组) */
export declare function isObj(obj: any, key?: string): boolean;
/**
 * 安全require, 如果引入的路径不存在, 或者文件内容语法错误, 则返回undefined, 而不会crash整个代码
 */
export declare function safeRequire(filePath: string, needErrorStack?: boolean): any;
export declare function checkIsInScf(): boolean;
