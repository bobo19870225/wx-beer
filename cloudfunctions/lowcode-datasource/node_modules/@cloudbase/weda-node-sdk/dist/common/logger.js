"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = void 0;
/**
 * 日志常见方法名列表, 级别由低到高
 *  <const> 为了将类型 string[] 转换为 ('trace' | 'debug')[]
 *  refer: https://github.com/microsoft/TypeScript/issues/28046#issuecomment-607145719
 *  docs: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions
 */
const METHOD_NAMES = ['trace', 'debug', 'info', 'log', 'warn', 'error'];
/** 默认日志配置 */
const loggerConfig = {
    /** 默认所有日志  */
    levelIndex: 0,
    /** 默认日志处理 */
    loggerHandler: (args, context) => {
        if (context.name) {
            args.unshift(`[${context.name}]`);
        }
        args.unshift(`[${getLocalTimeString()}]`);
        if (typeof console !== 'undefined') {
            console[context.level](...args);
        }
        // 有上报方法即上报
        if (loggerConfig.loggerReporter) {
            loggerConfig.loggerReporter(args, context);
        }
    },
};
function getLocalTimeString() {
    const time = new Date();
    const date = new Date(time.getTime() - time.getTimezoneOffset() * 60 * 1000);
    return date.toISOString().replace(/T/, ' ')
        .replace(/\..+/, '');
}
/**
 * 判断当前日志级别是否启用
 * @param levelName 日志level
 */
function isLogEnabled(logLevel, levelName) {
    const idx = METHOD_NAMES.indexOf(levelName);
    if (idx === -1)
        return false;
    return idx >= logLevel;
}
/** 日志对象基础方法 */
// @ts-ignore
const loggerMethods = {
    invoke: (args, context) => {
        if (!isLogEnabled(loggerConfig.levelIndex, context.level))
            return;
        loggerConfig.loggerHandler(args, context);
    },
};
METHOD_NAMES.forEach((name) => {
    // 指定调用的 this
    loggerMethods[name] = function (...args) {
        loggerMethods.invoke(args, Object.assign({}, this.context, { level: name }));
    };
});
/** 缓存已生成的自定义logger对象 */
const CACHED_LOGGER = {};
/** 默认 context */
const GLOBAL_CONTEXT = {};
/** 日志对象 */
exports.logger = Object.assign({}, loggerMethods, {
    context: GLOBAL_CONTEXT,
    /** 设置日志level */
    setLevel: (levelName) => {
        // @ts-ignore
        const idx = METHOD_NAMES.indexOf(levelName);
        if (idx === -1) {
            console.warn(`unsupported log level ${levelName}`);
            return;
        }
        ;
        loggerConfig.levelIndex = idx;
    },
    /**
     * 设置日志上报方法
     */
    setReporter: (reporter) => {
        loggerConfig.loggerReporter = reporter;
    },
    /**
     * 设置日志处理功能
     *  若自定义日志处理, 那日志行为将完全自定义处理, 上报行为亦需要自行处理, 不再自动调用
     */
    setLoggerHandler: (handler) => {
        loggerConfig.loggerHandler = handler;
    },
    /** 获取自定义日志对象 */
    get: (logName) => {
        if (!CACHED_LOGGER[logName]) {
            CACHED_LOGGER[logName] = Object.assign({}, loggerMethods, {
                context: Object.assign({}, GLOBAL_CONTEXT, { name: logName }),
            });
        }
        return CACHED_LOGGER[logName];
    },
});
