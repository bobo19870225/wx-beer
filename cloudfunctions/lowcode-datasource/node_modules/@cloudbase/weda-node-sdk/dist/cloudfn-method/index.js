"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.callCloudMethod = void 0;
const common_1 = require("../common");
const vm_1 = __importDefault(require("vm"));
const fn_context_1 = require("../fn-context");
async function callCloudMethod(params, context) {
    try {
        const vmModule = {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            exports(params, context) { },
        };
        const vmContext = {
            module: vmModule,
            require,
            TCBError: common_1.TCBError,
            Buffer,
            setTimeout,
            setInterval,
            setImmediate,
            clearTimeout,
            clearInterval,
            clearImmediate,
            /** 保证用户代码中的 console 输出可以被云函数劫持 */
            console,
            /**
             * 暴露 process
             *  允许用户通过 process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0 来规避请求部分网站可能出现的证书问题
             */
            process,
        };
        vm_1.default.createContext(vmContext);
        vm_1.default.runInNewContext(params.methodCfg.calleeBody.callee, vmContext);
        const result = await vmModule.exports(params.params, (0, fn_context_1.generatePrivateContext)(context));
        return result;
    }
    catch (e) {
        const userCode = e.code || e.name;
        let code = 'FnError.Cloud';
        if (userCode) {
            if (typeof userCode === 'string' && userCode.split('.').length > 1) {
                code = userCode;
            }
            else {
                code += `.${userCode}`;
            }
        }
        throw new common_1.TCBError(code, `APIs自定义方法${(params === null || params === void 0 ? void 0 : params.methodName) ? ` ${params.methodName} ` : ''}调用失败: ${(e === null || e === void 0 ? void 0 : e.message) || '未知错误'}`, {
            original: e,
        });
    }
}
exports.callCloudMethod = callCloudMethod;
