"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../common");
/**
 * 数据库数据源默认增删查改方法的实现
 */
const dbDefaultMethods = {
    async create(params, context) {
        const now = Date.now();
        // 追加创建时间、更新时间
        const newParams = Object.assign({}, params, {
            createdAt: now,
            updatedAt: now,
        });
        // 存在 openId 则追加 openId, 方便用户权限处理
        if (context.env.openId) {
            newParams._openid = context.env.openId || context.env.uid;
        }
        const result = await context.collection.add(newParams);
        return { _id: result.id };
    },
    // @ts-ignore
    async getRecords(params, context) {
        const collection = context.collection;
        const options = Object.assign({ pageSize: 10, pageNo: 1, orderType: 'desc' }, params || {});
        const cmd = context.database.command;
        let query;
        if (options.where) {
            const where = {};
            options.where.reduce((acc, cur) => {
                if (cur.rel === 'search') {
                    // ignore search term if val is empty
                    if (!cur.val)
                        return acc;
                    // @ts-ignore
                    acc[cur.key] = new context.database.RegExp({
                        regexp: String(cur.val).replace(/[|\\{}()[\]^$+*?.]/g, '\\$&'),
                        options: 'i',
                    });
                }
                else {
                    acc[cur.key] = cmd[cur.rel](cur.val);
                }
                return acc;
            }, where);
            query = collection.where(where);
        }
        if (options.orderBy) {
            // @ts-ignore
            if (query) {
                query = query.orderBy(options.orderBy, options.orderType);
            }
            else {
                query = collection.orderBy(options.orderBy, options.orderType);
            }
        }
        const skip = options.pageSize * (options.pageNo - 1);
        // @ts-ignore
        if (query) {
            query = query.skip(skip).limit(options.pageSize);
        }
        else {
            query = collection.skip(skip).limit(options.pageSize);
        }
        const recordsResult = query ? await query.get() : await collection.get();
        // @ts-ignore
        const totalCountResult = query ? await query.count() : await collection.count();
        return {
            records: recordsResult.data,
            total: totalCountResult.total,
            pageSize: options.pageSize,
            pageNo: options.pageNo,
        };
    },
    async getList(params, context) {
        // where 参数不能为空
        const result = await context.collection.where(params || {}).get();
        return result.data;
    },
    async getItem(params, context) {
        var _a;
        const result = await context.collection.doc(params._id).get();
        if ((_a = result.data) === null || _a === void 0 ? void 0 : _a.length) {
            return result.data[0];
        }
        throw new common_1.TCBError('UserError.RecordNotFound', `在数据源 ${context.env.dataSourceName} 中找不到id为 ${params._id} 的记录`);
    },
    async update(params, context) {
        const newParams = Object.assign({}, params, {
            updatedAt: Date.now(),
        });
        delete newParams.createdAt;
        delete newParams._id;
        const result = await context.collection.doc(params._id).update(newParams);
        return { updated: result.updated };
    },
    async delete(params, context) {
        const result = await context.collection
            .where({
            _id: params._id,
        })
            .remove();
        return { deleted: result.deleted };
    },
};
exports.default = dbDefaultMethods;
