"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.callBuiltinMethod = exports.dbDefaultMethods = void 0;
/**
 * 数据源方法相关方法
 */
const remote_api_1 = require("../remote-api");
const database_1 = __importDefault(require("./database"));
const common_1 = require("../common");
const config_1 = require("../config");
var database_2 = require("./database");
Object.defineProperty(exports, "dbDefaultMethods", { enumerable: true, get: function () { return __importDefault(database_2).default; } });
async function callBuiltinMethod(params, context) {
    try {
        if (params.useLegacy) {
            throw new common_1.TCBError('InnerError.ModelStop', 'should use legacy methods');
        }
        return await (0, remote_api_1.fetchWeda)({
            action: 'ProcessInternalMethod',
            data: {
                viewId: params.viewId,
                // 从流程调用时禁用数据源再触发其他流程
                disableFlowNotification: (0, config_1.getTriggerSource)() === 'flow',
                method: (0, common_1.normalizeBuiltinMethodName)(params.methodName),
                dataSourceName: params.dataSourceName,
                params: params.params || {},
            },
        }, false, params === null || params === void 0 ? void 0 : params.fetchOption).then(res => res.Data);
    }
    catch (error) {
        // 数据源内置方法调用失败时, 尝试原有实现
        if (error.code !== 'InnerError.ModelStop')
            throw error;
        const normalizeFnName = (0, common_1.fallback2oldMethodName)(params.methodName);
        if (!database_1.default[normalizeFnName]) {
            throw new common_1.TCBError('InnerError.FallbackNotApplicable', `微搭后端服务下线, 云函数不支持该内置数据源方法 ${params.methodName}`, {
                reason: `weda backend is out of service, ${params.methodName} not implements in legacy builtin methods`,
            });
        }
        return database_1.default[normalizeFnName](params.params, context);
    }
}
exports.callBuiltinMethod = callBuiltinMethod;
