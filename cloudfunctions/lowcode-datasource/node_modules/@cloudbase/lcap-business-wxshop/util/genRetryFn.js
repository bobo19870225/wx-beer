const { sleep } = require('./sleep');

const DEFAULT_OPTS = {
  maxTimes: 1,
  waitTime: 0,
};

/**
 * 重试配置
 * @typedef {object} RetryOpts
 * @property {number} [maxTimes] - 最大重试配置
 * @property {number} [waitTime] - 两次重试间的等待时间
 */

/**
 * 生成带有自动重试机制的函数
 * @param {Function} callback
 * @param {RetryOpts} opts
 */
function genRetryFn(callback, opts = DEFAULT_OPTS) {
  const { maxTimes, waitTime } = {
    ...DEFAULT_OPTS,
    ...opts,
  };
  if (maxTimes < 1) {
    throw new Error('function retry() 函数的 opts.maxTimes 不能小于 1');
  }
  if (waitTime < 0) {
    throw new Error('function retry() 函数的 opts.waitTime 不能小于 0');
  }

  return async function (...args) {
    let err;
    for (let i = 0; i < maxTimes; ++i) {
      try {
        return await callback.apply(this, args);
      } catch (error) {
        err = error;
      }
      await sleep(waitTime);
    }
    throw err;
  };
}

module.exports = { genRetryFn };
