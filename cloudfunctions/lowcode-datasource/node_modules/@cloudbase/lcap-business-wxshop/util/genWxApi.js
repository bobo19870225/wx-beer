const lodash = require('lodash');
const { default: axios } = require('axios');
const injectIoc = require('./injectIoc');
const {
  WX_PROXY_ERR,
  WX_API_ERR,
} = require('./../constant/errcode');
const {
  DEFAULT_PROXY_URL,
  PROXY_TYPE_URL_MAP,
} = require('./../constant/proxy');

const DEFAULT_OPTS = {
  tokenPlaceHolder: '$token$',
  proxyType: 'proxy',
};

/**
 * genWxApi 函数的附加选项
 * @typedef {object} GenWxApiOpts
 * @property {string} [tokenPlaceHolder] - token 占位符，默认为 "$token$"
 * @property {"proxy" | "form"} [proxyType] - 转发类型，默认为 "proxy"
 */

/**
 * 快速生成微信电商接口的请求函数
 * @param {string} apiUrl 微信接口地址
 * @param {GenWxApiOpts} opts token 占位符，默认为 $token$
 * @returns {(token:string, apiParams: object) => Promise<any>} 返回生成指定接口的请求函数
 */
module.exports = (apiUrl = '', opts = {}) => {
  const { tokenPlaceHolder, proxyType } = {
    ...DEFAULT_OPTS,
    ...opts,
  };
  apiUrl = apiUrl.startsWith('/') ? apiUrl : `/${apiUrl}`;

  return async (token, apiParams = {}) => {
    const { services: { errService } } = injectIoc();
    try {
      const axiosRes = await axios({
        url: PROXY_TYPE_URL_MAP[proxyType] || DEFAULT_PROXY_URL,
        method: 'post',
        data: {
          axiosConfig: {
            url: apiUrl.replace(tokenPlaceHolder, token),
            method: 'post',
            data: apiParams,
          },
        },
      });
      const res = axiosRes.data;
      if (lodash.get(res, 'code') !== 0) {
        const errMsg = `Errcode: ${res.code}. ${res.msg}`;
        errService.throw(WX_PROXY_ERR, errMsg);
      }
      if (lodash.get(res, 'result.errcode') && String(res, 'result.errcode') !== '0') {
        const errMsg = `errcode:${res.result.errcode}. errmsg:${res.result.errmsg}`;
        errService.throw(WX_API_ERR, errMsg);
      }
      return lodash.get(res, 'result');
    } catch (error) {
      errService.throw(WX_PROXY_ERR, error.message);
    }
  };
};
