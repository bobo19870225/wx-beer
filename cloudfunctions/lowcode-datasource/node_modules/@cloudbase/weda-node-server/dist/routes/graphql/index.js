"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// import fs from 'fs';
// import path from 'path';
// import { graphql } from 'graphql';
// import { loadDataSources } from '../../fns/load-datasources';
// import { ENABLE_GRAPHQL_UI, HTTP_CODE_MAP } from '../../config';
// import { generateSchema } from '../../fns/graphql-schema';
/**
 * playground 页面来自 https://github.com/graphql/graphql-playground#as-html-page 中的 The Playground HTML with full loading animation
 *  页面末尾 GraphQLPlayground.init 的参数 endpoint 应当与 graphql 路由保持一致
 */
const graphqlMiddleware = async (ctx) => {
    ctx.throw(500, 'unavailable because of no one using it');
    return;
    // 返回 playground 页面
    // if (ctx.method === 'GET') {
    //   if (!ENABLE_GRAPHQL_UI) ctx.throw(405, HTTP_CODE_MAP['405'].message);
    //   const playgroundPath = path.join(__dirname, 'playground.html');
    //   const stats = await fs.promises.stat(playgroundPath);
    //   ctx.set('Content-Length', String(stats.size));
    //   ctx.type = 'html';
    //   ctx.body = fs.createReadStream(playgroundPath);
    //   return;
    // }
    // if (ctx.method !== 'POST') ctx.throw(405, HTTP_CODE_MAP['405'].message);
    // const datasources = await loadDataSources();
    // const schema = generateSchema(datasources);
    // let requestBody = ctx.request.body || {};
    // // 设计上参数应当在 body.params 中, 但 playground 没有 transform request body 的方法
    // //  导致无法修改其结构, 故在此做兼容处理
    // requestBody = Object.assign({}, ctx.query, requestBody, requestBody.params || {});
    // const { query, variables, operationName } = requestBody;
    // // result 的值可能为 null,  koa 中将 ctx.body 设置为 null 即表示将body清空, 后续对其再设置将无效
    // //  ref: https://github.com/koajs/koa/issues/998
    // ctx.body = await graphql({
    //   schema,
    //   operationName,
    //   source: query,
    //   variableValues: variables,
    // });
};
exports.default = graphqlMiddleware;
