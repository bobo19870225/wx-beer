"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOutputTypeFromSchema = exports.getDsSchemaType = exports.getGetRecordsResponseType = exports.getOutParamsType = void 0;
const graphql_1 = require("graphql");
const weda_node_sdk_1 = require("@cloudbase/weda-node-sdk");
const utils_1 = require("../utils");
const common_1 = require("./common");
const call_datasource_1 = require("../../call-datasource");
/**
 * 获取数据源方法出参的 graphql 类型
 * @param datasource 数据源对象
 * @param method 方法名, 字符串表示内置方法, 对象即内置方法
 */
function getOutParamsType(datasource, method) {
    // 内置方法
    if (typeof method === 'string') {
        const responseTypeName = (0, utils_1.getMethodOutTypeName)(datasource.name, method, true);
        const standardMethodName = (0, weda_node_sdk_1.normalizeBuiltinMethodName)(method);
        const handler = builtinMethodResponseType[standardMethodName];
        if (!handler) {
            throw new weda_node_sdk_1.TCBError('GLError.NotImplemented', `GraphQL暂时未支持该内置方法 ${method}`, {
                reason: `builtin method ${method} responseType not implemented in graphql mode`,
            });
        }
        return handler(responseTypeName, datasource);
    }
    // 自定义方法
    return getOutputTypeFromSchema((0, utils_1.getMethodOutTypeName)(datasource.name, method.name, true), method.outParams);
}
exports.getOutParamsType = getOutParamsType;
/** 内置方法类型 */
const builtinMethodResponseType = {
    wedaGetItem(typeName, datasource) {
        return getDsSchemaType(datasource);
    },
    wedaGetList(typeName, datasource) {
        return getDsSchemaType(datasource, true);
    },
    wedaGetRecords(typeName, datasource) {
        return getGetRecordsResponseType(typeName, datasource);
    },
    wedaDelete() {
        return DELETE_RESPONSE_TYPE;
    },
    wedaCreate() {
        return CREATE_RESPONSE_TYPE;
    },
    wedaUpdate() {
        return UPDATE_RESPONSE_TYPE;
    },
};
// 删除的响应类型
const DELETE_RESPONSE_TYPE = new graphql_1.GraphQLObjectType({
    name: 'WedaDeleteResponse',
    fields: { deleted: { type: common_1.SCALAR_TYPES.int, description: '删除的记录数量' } },
});
// 创建的响应类型
const CREATE_RESPONSE_TYPE = new graphql_1.GraphQLObjectType({
    name: 'WedaCreateResponse',
    fields: { _id: { type: common_1.SCALAR_TYPES.id, description: '新记录的ID' } },
});
// 更新的响应类型
const UPDATE_RESPONSE_TYPE = new graphql_1.GraphQLObjectType({
    name: 'WedaUpdateResponse',
    fields: { updated: { type: common_1.SCALAR_TYPES.int, description: '更新的记录数量' } },
});
/**
 * 获取查询列表的响应结果
 * @param typeName 类型名称
 * @param datasource 数据源描述
 */
function getGetRecordsResponseType(typeName, datasource) {
    return new graphql_1.GraphQLObjectType({
        name: `${datasource.name}GetRecordsResponseType`,
        fields: {
            pageNo: { type: common_1.SCALAR_TYPES.int, description: '页码, 从 1 开始' },
            pageSize: { type: common_1.SCALAR_TYPES.int, description: '每页大小' },
            total: { type: common_1.SCALAR_TYPES.int, description: '总条数' },
            records: { type: getDsSchemaType(datasource, true), description: '记录内容' },
        },
    });
}
exports.getGetRecordsResponseType = getGetRecordsResponseType;
/**
 * 缓存数据源模型对应的 graphql 类型
 *  主要用于缓存自建数据源字段设置的类型, 以及字段设置的数组类型
 */
const CACHED_SCHEMA = {};
/**
 * 获取自建数据源模型的 graphql 类型信息
 * @param datasource 数据源对象
 * @param isList 是否返回列表类型
 */
function getDsSchemaType(ds, isList) {
    const datasource = (0, utils_1.getDatasource)(ds);
    if (!datasource)
        throw new weda_node_sdk_1.TCBError('UserError.DsNotFound', `找不到数据源${ds}, 或该数据源未正确更新`, {
            reason: `can not find datasource ${ds} when try to \`getDsSchemaType\` in GraphQL `,
        });
    const dsName = datasource.name;
    const cacheName = isList ? `${dsName}List` : dsName;
    if (!CACHED_SCHEMA[cacheName]) {
        if (isList) {
            CACHED_SCHEMA[cacheName] = new graphql_1.GraphQLList(getDsSchemaType(datasource));
        }
        else {
            CACHED_SCHEMA[cacheName] = getOutputTypeFromSchema(datasource.name, datasource.schema);
        }
    }
    return CACHED_SCHEMA[cacheName];
}
exports.getDsSchemaType = getDsSchemaType;
/**
 * 根据数据源的schema 获取graphql 的类型定义
 * @param schema 数据源字段 schema
 * @param needRelated 是否需要关联的字段信息(比如枚举, 关联引用等)
 */
function getOutputTypeFromSchema(typeName, schema) {
    // @ts-ignore
    const scalarType = common_1.SCALAR_TYPES[schema.type];
    if (scalarType)
        return scalarType;
    if (schema.type === 'array') {
        return new graphql_1.GraphQLList(getOutputTypeFromSchema((0, common_1.getFieldTypeName)(typeName, schema), schema.items));
    }
    if (schema.type === 'object') {
        if (!Object.keys(schema.properties).length)
            return common_1.SCALAR_TYPES.any;
        return new graphql_1.GraphQLObjectType({
            name: typeName,
            description: (0, common_1.getFieldDescription)(typeName, schema),
            fields: () => Object.keys(schema.properties).reduce((acc, cur) => {
                const keyProp = schema.properties[cur];
                acc[cur] = {
                    description: (0, common_1.getFieldDescription)(cur, keyProp),
                    type: getOutputTypeFromSchema((0, common_1.getFieldTypeName)(typeName, keyProp, cur), keyProp),
                };
                // 枚举字段
                if (keyProp['x-enumObj']) {
                    acc[`${cur}__label`] = {
                        type: common_1.SCALAR_TYPES.string,
                        description: `${keyProp.title}枚举显示值`,
                        resolve: (parent) => {
                            const item = keyProp['x-enumObj'].find(it => it.value === parent[cur]);
                            return (item === null || item === void 0 ? void 0 : item.label) || '<unspecified>';
                        },
                    };
                }
                // 字段关联
                // TODO: 默认认为一对一关联, 其他情况未处理
                if ((keyProp.type === 'string' || keyProp.type === 'number')
                    && keyProp['x-parent']) {
                    const linkProp = keyProp['x-parent'];
                    acc[`${cur}__ref`] = {
                        type: getDsSchemaType(linkProp.parentDataSourceName),
                        description: `${keyProp.title}关联对象`,
                        resolve: (parent) => {
                            // 无id信息, 直接返回, 避免报错, 也可以优化效率
                            if (!parent[cur])
                                return null;
                            return (0, call_datasource_1.callDataSource)({
                                name: linkProp.parentDataSourceName,
                                methodName: 'wedaGetItem',
                                params: { _id: parent[cur] },
                                // 空对象则返回空
                            }).then(res => (res && Object.keys(res).length ? res : null));
                        },
                    };
                }
                return acc;
            }, {}),
        });
    }
    throw new weda_node_sdk_1.TCBError('GLError.UnsupportedDataType', `GraphQL暂时不支持数据源字段类型${schema.type}`, {
        reason: `unsupported type ${schema.type} in datasource schema`,
    });
}
exports.getOutputTypeFromSchema = getOutputTypeFromSchema;
