"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.callDataSource = void 0;
const load_datasources_1 = require("../load-datasources");
const weda_node_sdk_1 = require("@cloudbase/weda-node-sdk");
async function callDataSource(options) {
    var _a;
    const dataSources = await (0, load_datasources_1.loadDataSources)((_a = options === null || options === void 0 ? void 0 : options.privateInfo) === null || _a === void 0 ? void 0 : _a.isPrivate);
    const dsName = options.name || options.dataSourceName;
    let dataSource = dataSources.find(ds => dsName === ds.name);
    // 模型数据源停止更新数据源云函数, 找不到属于正常现象
    if (!dataSource) {
        /**
         * 后端创建数据源会有延迟, 可能出现刚创建数据源、添加方法后, 进行测试找不到数据源
         *  故, 若为测试模式, 且找不到数据源对象, 则在此做兼容处理
         */
        // if (options.isTestMode) {
        // mock 最基本信息, node-sdk 会根据该信息找对应的的测试数据源信息替换
        dataSource = { name: dsName };
        // } else {
        weda_node_sdk_1.logger.warn(`datasource ${dsName} not found in scf, it's an error if you are calling a connector`);
        // }
    }
    const result = await (0, weda_node_sdk_1.invokeDataSource)(Object.assign(Object.assign({}, options), { dataSource }));
    return result;
}
exports.callDataSource = callDataSource;
