"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadDataSources = exports.standardizeDataSource = void 0;
const glob_1 = __importDefault(require("glob"));
const path_1 = __importDefault(require("path"));
const transform_ds_1 = require("./transform-ds");
const config_1 = require("../../config");
const weda_node_sdk_1 = require("@cloudbase/weda-node-sdk");
var transform_ds_2 = require("./transform-ds");
Object.defineProperty(exports, "standardizeDataSource", { enumerable: true, get: function () { return transform_ds_2.standardizeDataSource; } });
/**
 * 遇到错误是否直接抛出异常
 */
const throwIfError = false;
let CACHED = null;
function loadDataSources(isPrivate = false) {
    if (CACHED)
        return CACHED;
    let cwd = config_1.DS_FOLDER_PATH;
    if (isPrivate) {
        cwd = path_1.default.join(process.cwd(), 'datasources');
    }
    weda_node_sdk_1.logger.log('DS_FOLDER_PATH: ', { isPrivate, prefix: process.cwd(), cwd });
    CACHED = new Promise((resolve, reject) => {
        (0, glob_1.default)('*.json', { cwd }, (error, matches) => {
            if (error) {
                if (throwIfError)
                    return reject(error);
                return resolve([]);
            }
            try {
                const result = matches
                    .map((fileName) => {
                    const fullPath = path_1.default.join(cwd, fileName);
                    try {
                        // eslint-disable-next-line @typescript-eslint/no-require-imports
                        const json = require(fullPath);
                        return (0, transform_ds_1.standardizeDataSource)(json);
                    }
                    catch (error) {
                        if (throwIfError)
                            throw error;
                        return null;
                    }
                    // 过滤掉空的项目
                })
                    .filter(f => !!f);
                resolve(result);
            }
            catch (error) {
                reject(error);
            }
        });
    });
    return CACHED;
}
exports.loadDataSources = loadDataSources;
