const injectIoc = require('../util/injectIoc');
const { NO_SIGNIN } = require('../constant/errcode');

/**
   * 返回连续签到几天，以及每天的正常签到奖励，及额外奖励
   * 如果有入参 day, 则返回连续第 day 天的奖励信息
   * 如果没有入参 day，则返回所有
   * 按 day 升序返回
   * @param {number} [day] - 获取指定连续第几天签到的奖励信息
   * @returns { array<object> } 返回一个数组对象
   * @returns { number } day - 第几天
   * @returns { number } tag - 项目唯一标记
   *
   * @returns { array<object> } 返回一个数组对象结果
   * @returns { string } type - 普通奖品类型, 取值：(integral)积分，(virtualGoods)虚拟物品，(goods)实物, (noPrize)无奖励
   * @returns { object } prize - 普通奖品记录对象
   * @returns { string } prize.name - 正常奖品记录对象奖品名
   * @returns { string } prize.desc - 正常奖品记录对象奖品描述
   * @returns { string } prize.path - 正常奖品记录对象奖品图标
   * @returns { string } prize.pathGray - 正常奖品记录对象奖品图标灰色
   * @returns { number } prize.faceValue - 正常奖品记录对象奖品面值
   * @returns { number } prize._id - 正常奖品记录对象奖品id
   * @returns { string } prize.type - 普通奖励类型，取值：(integral)积分，(virtualGoods)虚拟物品，(goods)实物, (noPrize)无奖励
   *
   * @returns { string } extraType-额外奖品类型, 取值：(integral)积分，(virtualGoods)虚拟物品，(goods)实物, (noPrize)无奖励 , prizeChance奖励机会
   * @returns { string } extraPrizeId - 额外奖品记录 id
   * @returns { array<object> } extraPrize[] - 额外奖品记录对象
   * @returns { string } extraPrize[].desc - 额外奖品记录对象奖品描述
   * @returns { string } extraPrize[].name - 额外奖品记录对象奖品名称
   * @returns { string } extraPrize[]._id - 额外奖品记录 ID
   * @returns { string } extraPrize[].path - 额外奖品记录奖品图标
   * @returns { string } extraPrize[].pathGray - 额外奖品记录奖品图标灰色
   * @returns { number } extraPrize[].faceValue - 面值
   * @returns { number } extraPrize[].type - 奖品类型 (integral)积分，(virtualGoods)虚拟物品，(goods)实物, (noPrize)无奖励
   */
module.exports = async (tag, day = '') => {
  const { services: { tcbService: { db }, errService, loggerService, tcloudRequestService } } = injectIoc();

  const [extraPrize, projConfig, signinPrize] = await tcloudRequestService.getDsColName(['ewjlpzb_knmgqpg', 'qdgz_a6ya48t', 'qdjlpzb_gt0u4pu']);

  /**
   * 补齐8条数据，传递进来的是所有的额外奖励记录，但是每条记录如果是奖励机会，则都要补齐8个奖品
   * @param { array<object> } arrData 已有的数据
   * @returns { array<object> } 补齐后的数据
   */
  const polishing = async (arrData) => {
    // 循环每条额外记录，计算每条记录下是否有8条
    arrData.forEach((objExtraPirze) => {
      const arrNewExtraPrize = objExtraPirze.prize;
      const n = objExtraPirze.prize.length;
      loggerService.info({ content: '补齐8条记录前', day: objExtraPirze.day, nums: n, type: objExtraPirze.type });
      if (objExtraPirze.type === 'prizeChance' && n < 8 && n >= 1) {
        for (let i = 0 ; i < 8 - n; i++) {
          const m = Math.floor(Math.random() * n); // 取0-n的随机整数，不包含n
          delete objExtraPirze.prize[m].rate;
          delete objExtraPirze.prize[m].nums;
          delete objExtraPirze.prize[m].surplusNums;
          arrNewExtraPrize.push(objExtraPirze.prize[m]);
        }
      }
      loggerService.info({ content: '补齐8条记录后',  day: objExtraPirze.day, nums: arrNewExtraPrize.length  });
      objExtraPirze.prize = arrNewExtraPrize;
    });
    return arrData;
  };
  const getPrizeExtra = async (tag = '', day = '') => {
    const reData = [];
    const resProjData = await db.collection(projConfig).where({ _id: tag })
      .limit(1)
      .get();
    if (resProjData && resProjData.data.length > 0) {
      // 普通奖励查询
      const resSigninPrizeData = await db.collection(signinPrize).where({ tag: resProjData.data[0]._id })
        .orderBy('day', 'asc')
        .get();

      // 额外奖励查询
      const resExtraPrizeData = await db.collection(extraPrize).where({ tag: resProjData.data[0]._id })
        .get();
      const objDayExtraPrize = {};// 以 day 为 key 存储额外奖励记录
      if (resExtraPrizeData && resExtraPrizeData.data.length > 0) {
        // 如果用户配置记录小于8条，则复制当前补齐8条返回，这逻辑好奇葩
        const arrExtraPrizeData = await polishing(resExtraPrizeData.data);
        arrExtraPrizeData.forEach((objExtraPrize) => {
          objDayExtraPrize[objExtraPrize.day] = objExtraPrize;
        });
      }

      // 合并记录
      if (resSigninPrizeData && resSigninPrizeData.data.length > 0) {
        resSigninPrizeData.data.forEach((objSigninPrize) => {
          const objData = {
            day: objSigninPrize.day,
            tag: objSigninPrize.tag,
            prize: {},
            extraPrize: [],
          };
          objData.type = 'noPrize';
          if (Object.values(objSigninPrize.prize).length > 0) {
            objData.type = objSigninPrize.type;
            objData.prize = {
              name: objSigninPrize.prize.name,
              desc: objSigninPrize.prize.desc,
              faceValue: objSigninPrize.prize.faceValue,
              type: objSigninPrize.prize.type,
              path: objSigninPrize.prize.path,
              pathGray: objSigninPrize.prize.pathGray,
              _id: objSigninPrize._id,
            };
          }
          objData.extraType = 'noPrize';
          if (objDayExtraPrize[objSigninPrize.day]
            && objDayExtraPrize[objSigninPrize.day].prize.length > 0) { // 额外奖励有配置
            objData.extraType = objDayExtraPrize[objSigninPrize.day].type; // 额外奖励类型
            objData.extraPrize = objDayExtraPrize[objSigninPrize.day].prize;
            objData.extraPrizeId = objDayExtraPrize[objSigninPrize.day]._id;
          }
          reData.push(objData);
        });
        if (day) {
          const reNewData = [];
          reData.forEach((item) => {
            if (item.day === day) {
              reNewData.push(item);
            }
          });
          return reNewData;
        }
        return reData;
      }
    }
    errService.throw(NO_SIGNIN[0], NO_SIGNIN[1]);
  };
  return await getPrizeExtra(tag, day);
};
