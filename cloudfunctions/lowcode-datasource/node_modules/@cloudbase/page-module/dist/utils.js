"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkNodeModuleDependencies = exports.identifyRuntimeEnv = exports.RuntimeEnv = exports.isNodeEnv = exports.isSupportCloudbase = exports.isInWxEnv = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
function isInWxEnv() {
    // window && window.__wxjs_environment
    return !!__wxConfig;
}
exports.isInWxEnv = isInWxEnv;
/* eslint-enable @typescript-eslint/naming-convention */
function isSupportCloudbase() {
    return !!wx.cloud;
}
exports.isSupportCloudbase = isSupportCloudbase;
function isNodeEnv() {
    var _a, _b;
    return ((_b = (_a = global === null || global === void 0 ? void 0 : global.process) === null || _a === void 0 ? void 0 : _a.release) === null || _b === void 0 ? void 0 : _b.name) === 'node';
}
exports.isNodeEnv = isNodeEnv;
var RuntimeEnv;
(function (RuntimeEnv) {
    RuntimeEnv["NODEJS"] = "nodejs";
    RuntimeEnv["WX_CLIENT"] = "WX_CLIENT";
    RuntimeEnv["UNKNOWN"] = "unknown";
})(RuntimeEnv = exports.RuntimeEnv || (exports.RuntimeEnv = {}));
function identifyRuntimeEnv() {
    // 注意检查顺序：先检查是否在 Node.js 环境，再检查是否在小程序环境
    if (isNodeEnv()) {
        return RuntimeEnv.NODEJS;
    }
    if (isInWxEnv() && isSupportCloudbase()) {
        return RuntimeEnv.WX_CLIENT;
    }
    return RuntimeEnv.UNKNOWN;
}
exports.identifyRuntimeEnv = identifyRuntimeEnv;
function checkNodeModuleDependencies(pkgName) {
    try {
        /* eslint-disable @typescript-eslint/no-require-imports */
        require(pkgName);
    }
    catch (e) {
        if (e.code === 'MODULE_NOT_FOUND') {
            /* eslint-disable max-len */
            throw new Error(`[ERROR][${pkgName}] is required for Node.js environment, please install '${pkgName}' first.`);
        }
        else {
            throw e;
        }
    }
}
exports.checkNodeModuleDependencies = checkNodeModuleDependencies;
