"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TcbService = void 0;
const config_service_1 = require("./../config/config.service");
const manager_node_1 = __importDefault(require("@cloudbase/manager-node"));
const node_sdk_1 = __importDefault(require("@cloudbase/node-sdk"));
const inversify_1 = require("inversify");
const context_types_1 = require("../context/context.types");
const db_1 = require("../../db");
const constants_1 = require("../../constants");
/**
 * 初始化云开发相关库
 */
let TcbService = class TcbService {
    constructor(configService, lcDatasourceCtx) {
        this.configService = configService;
        this.lcDatasourceCtx = lcDatasourceCtx;
        this.initNodeSdk();
        this.initManagerSdk();
    }
    /**
     * 初始化云开发Node SDK
     */
    initNodeSdk() {
        var _a, _b;
        if (!this.tcbApp) {
            this.tcbApp = node_sdk_1.default.init(this.configService.isLocalDev()
                ? {
                    env: this.configService.getEnvironmentVariable('TCB_ENV'),
                    secretId: this.configService.getEnvironmentVariable('TENCENTCLOUD_SECRETID'),
                    secretKey: this.configService.getEnvironmentVariable('TENCENTCLOUD_SECRETKEY'),
                    region: this.configService.getEnvironmentVariable('TCB_REGION'),
                } : {
                env: ((_b = (_a = this.lcDatasourceCtx) === null || _a === void 0 ? void 0 : _a.cloudbase) === null || _b === void 0 ? void 0 : _b.SYMBOL_CURRENT_ENV) || this.envId,
            });
            db_1.localDb.setVal(constants_1.LOCAL_DB_LOGGER, this.tcbApp.logger());
        }
    }
    /**
     * 初始化云开发Manager SDK
     */
    initManagerSdk() {
        if (!this.tcbManager) {
            this.tcbManager = manager_node_1.default.init(this.configService.isLocalDev()
                ? {
                    envId: this.configService.getEnvironmentVariable('TCB_ENV'),
                    secretId: this.configService.getEnvironmentVariable('TENCENTCLOUD_SECRETID'),
                    secretKey: this.configService.getEnvironmentVariable('TENCENTCLOUD_SECRETKEY'),
                    region: this.configService.getEnvironmentVariable('TCB_REGION'),
                } : {
                envId: this.envId,
            });
        }
    }
    /**
     * 云开发Node SDK实例化对象
     */
    get app() {
        return this.tcbApp;
    }
    /**
     * 云开发Manager SDK实例化对象
     */
    get manager() {
        return this.tcbManager;
    }
    /**
     * 云开发数据库对象
     */
    get db() {
        return this.tcbApp.database();
    }
    /**
     * 云开发环境ID（兼容本地开发和线上数据源）
     */
    get envId() {
        return this.configService.isLocalDev()
            ? this.configService.getEnvironmentVariable('TCB_ENV')
            : this.configService.getEnvironmentVariable('SCF_NAMESPACE');
    }
    /**
     * 获取云函数的logger
     */
    get logger() {
        return this.tcbApp.logger();
    }
};
TcbService = __decorate([
    inversify_1.injectable(),
    __param(1, inversify_1.inject(context_types_1.LC_DATASOURCE_CTX_TYPE)),
    __metadata("design:paramtypes", [config_service_1.ConfigService, Object])
], TcbService);
exports.TcbService = TcbService;
