"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggerService = void 0;
const inversify_1 = require("inversify");
const constants_1 = require("../../constants");
const db_1 = require("../../db");
const utils_1 = require("../../utils");
let LoggerService = class LoggerService {
    info(logInfo) {
        this.print(Object.assign(Object.assign({}, logInfo), { logLevel: 'info' }));
    }
    warn(logInfo) {
        this.print(Object.assign(Object.assign({}, logInfo), { logLevel: 'warn' }));
    }
    error(logInfo) {
        this.print(Object.assign(Object.assign({}, logInfo), { logLevel: 'error' }));
    }
    print(logInfo) {
        const now = utils_1.getLocalDayjs().valueOf();
        const info = Object.assign({ logTime: now, logLevel: 'info' }, logInfo);
        const logger = db_1.localDb.getVal(constants_1.LOCAL_DB_LOGGER);
        if (logger) {
            logger[info.logLevel](info);
        }
        else {
            console.log(JSON.stringify(info));
        }
    }
};
LoggerService = __decorate([
    inversify_1.injectable()
], LoggerService);
exports.LoggerService = LoggerService;
