"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TcloudRequestService = void 0;
const inversify_1 = require("inversify");
const axios_1 = __importDefault(require("axios"));
const signature_nodejs_1 = require("@cloudbase/signature-nodejs");
const utils_1 = require("./../../utils");
const config_service_1 = require("../config/config.service");
const err_service_1 = require("../err/err.service");
const constants_1 = require("../../constants");
const index_1 = require("./../../db/index");
const tcb_service_1 = require("../tcb/tcb.service");
/**
 * 腾讯云 云API
 */
let TcloudRequestService = class TcloudRequestService {
    constructor(configService, errService, tcbService) {
        this.configService = configService;
        this.errService = errService;
        this.tcbService = tcbService;
        this.tcloudConfig = {
            lowcode: {
                region: 'ap-shanghai',
                version: '2021-01-08',
                host: 'lowcode.tencentcloudapi.com',
                url: 'https://lowcode.tencentcloudapi.com',
            },
        };
    }
    /**
     * 请求腾讯云API v3（兼容本地开发和线上数据源）
     */
    async requestV3(params) {
        var _a, _b, _c, _d, _e, _f, _g;
        const actionParams = params.actionParams || {};
        const serviceConfig = this.tcloudConfig[params.service];
        // 本地开发模式：使用永久密钥
        // 线上运行模式：使用临时密钥+Token
        const credentials = {
            secretId: this.configService.getEnvironmentVariable('TENCENTCLOUD_SECRETID'),
            secretKey: this.configService.getEnvironmentVariable('TENCENTCLOUD_SECRETKEY'),
            secretToken: this.configService.getEnvironmentVariable('TENCENTCLOUD_SESSIONTOKEN'),
        };
        const headers = this.getHeadersV3({
            service: params.service,
            action: params.action,
            region: serviceConfig.region,
            version: serviceConfig.version,
            endpoint: serviceConfig.host,
            secretId: credentials.secretId,
            secretKey: credentials.secretKey,
            params: actionParams,
        });
        if (credentials.secretToken) {
            headers['X-TC-Token'] = credentials.secretToken;
        }
        try {
            const res = (await axios_1.default({
                url: serviceConfig.url,
                method: 'post',
                data: actionParams,
                headers,
            })).data;
            if ((_b = (_a = res === null || res === void 0 ? void 0 : res.Response) === null || _a === void 0 ? void 0 : _a.Error) === null || _b === void 0 ? void 0 : _b.Code) {
                const errMsg = `RequestId: ${(_c = res === null || res === void 0 ? void 0 : res.Response) === null || _c === void 0 ? void 0 : _c.RequestId}. ErrCode: ${(_e = (_d = res === null || res === void 0 ? void 0 : res.Response) === null || _d === void 0 ? void 0 : _d.Error) === null || _e === void 0 ? void 0 : _e.Code}. ErrMsg: ${(_g = (_f = res === null || res === void 0 ? void 0 : res.Response) === null || _f === void 0 ? void 0 : _f.Error) === null || _g === void 0 ? void 0 : _g.Message}`;
                throw new Error(errMsg);
            }
            return res;
        }
        catch (error) {
            throw error;
        }
    }
    /**
     * 获取数据源底层的数据库名
     * @param dsNameList 数据源标识列表
     * @returns
     */
    async getDsColName(dsNameList) {
        var _a, _b;
        // 获取缓存中没有的数据源名
        const filterDsNameList = dsNameList.filter((dsName) => {
            const key = this.getDsCacheKey(dsName);
            const val = index_1.localDb.getVal(key);
            return val === null || val === undefined;
        });
        // 拉取未被缓存的数据源名，并缓存对应的数据库名
        if (filterDsNameList.length) {
            const res = await this.requestV3({
                service: 'lowcode',
                action: 'DescribeDataSourceList',
                actionParams: {
                    PageIndex: 1,
                    PageSize: 100,
                    EnvId: this.tcbService.envId,
                    DataSourceNames: filterDsNameList,
                },
            });
            const rows = ((_b = (_a = res === null || res === void 0 ? void 0 : res.Response) === null || _a === void 0 ? void 0 : _a.Data) === null || _b === void 0 ? void 0 : _b.Rows) || [];
            for (const dsName of filterDsNameList) {
                const row = rows.find(item => item.Name === dsName);
                if (!row) {
                    this.errService.throw(constants_1.UNVALID_DS_ERR, `数据源标识(${dsName})不存在`);
                }
                const key = this.getDsCacheKey(row.Name);
                index_1.localDb.setVal(key, `lcap-${row.Id}-${row.Name}`);
            }
        }
        // 统一从缓存读取数据源名对应的数据库名
        const colNameList = [];
        for (const dsName of dsNameList) {
            const key = this.getDsCacheKey(dsName);
            const val = index_1.localDb.getVal(key);
            colNameList.push(val);
        }
        return colNameList.map(colName => `${colName}${this.configService.isDsOnline ? '' : '-preview'}`);
    }
    /**
     * 获取云API请求的v3签名
     */
    getHeadersV3(options) {
        const { service, action, region, endpoint, version, secretId, secretKey, params } = options;
        const timestamp = Math.floor(utils_1.getLocalDayjs().valueOf() / 1000);
        const headers = {
            'Content-Type': 'application/json; charset=utf-8',
            Host: endpoint,
        };
        const { authorization } = signature_nodejs_1.sign({
            method: 'POST',
            secretId,
            secretKey,
            url: `https://${endpoint}`,
            params,
            timestamp,
            headers,
            service,
            isCloudApi: true,
        });
        return Object.assign(Object.assign({ Authorization: authorization }, headers), { 'X-TC-Action': action, 'X-TC-Timestamp': timestamp.toString(), 'X-TC-Version': version, 'X-TC-Region': region });
    }
    /**
     * 计算数据源缓存键名
     * @param dsName 数据源标识
     * @returns
     */
    getDsCacheKey(dsName) {
        return `tcloud-request-ds-cache-${dsName}`;
    }
};
TcloudRequestService = __decorate([
    inversify_1.injectable(),
    __metadata("design:paramtypes", [config_service_1.ConfigService,
        err_service_1.ErrService,
        tcb_service_1.TcbService])
], TcloudRequestService);
exports.TcloudRequestService = TcloudRequestService;
