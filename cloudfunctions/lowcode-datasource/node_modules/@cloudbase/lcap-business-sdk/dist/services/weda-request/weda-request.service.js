"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WedaRequestService = void 0;
const inversify_1 = require("inversify");
const config_service_1 = require("../config/config.service");
const cloud_api_1 = require("@cloudbase/cloud-api");
const utils_1 = require("./../../utils/");
const tcb_service_1 = require("../tcb/tcb.service");
const logger_service_1 = require("../logger/logger.service");
let WedaRequestService = class WedaRequestService {
    constructor(configService, tcbService, loggerService) {
        this.configService = configService;
        this.tcbService = tcbService;
        this.loggerService = loggerService;
    }
    /**
     * 请求微搭请求后端
     */
    async request(params) {
        // 获取密钥信息
        const credentials = {
            secretId: this.configService.getEnvironmentVariable('TENCENTCLOUD_SECRETID'),
            secretKey: this.configService.getEnvironmentVariable('TENCENTCLOUD_SECRETKEY'),
            sessionToken: this.configService.getEnvironmentVariable('TENCENTCLOUD_SESSIONTOKEN'),
        };
        if (!utils_1.isValidString(credentials.sessionToken)) {
            // @ts-ignore
            delete credentials.sessionToken;
        }
        // 拼接请求信息
        const { uid, source } = this.getUserSource();
        const reqParams = {
            action: params.action,
            credentials,
            envId: this.tcbService.envId,
            envType: this.configService.isDsOnline ? 'prod' : 'pre',
            uid,
            source,
            data: params.data,
        };
        // 本地模式开启 http 代理
        const wedaProxy = this.configService.getEnvironmentVariable('WEDA_API_PROXY');
        const config = this.configService.isLocalDev() && utils_1.isValidString(wedaProxy)
            ? { proxy: wedaProxy }
            : {};
        return await cloud_api_1.wedaRequest(reqParams, config);
    }
    /**
     * 当前用户是否为管理员用户
     * doc: https://tcloud-dev.oa.com/document/product/1505/64326?!preview&!document=1
     */
    async isAdminRole(opts = { prevPass: true }) {
        // 预览环境是否跳过检查
        if (opts.prevPass && !this.configService.isDsOnline) {
            return true;
        }
        try {
            // 查询当前用户绑定的角色信息
            const { Data: user } = await this.request({
                action: 'DescribeWedaUser',
                data: {
                    RelatedType: 'UserRelatedRole',
                },
            });
            // 检查当前用户的角色是否为超级管理员
            const roles = user.RelatedRoles || [];
            for (const role of roles) {
                if (role.RoleIdentity === 'administrator') {
                    return true;
                }
            }
            return false;
        }
        catch (error) {
            // 对于非微搭注册的用户，例如直接通过TCB注册的用户，接口会爆错
            this.loggerService.warn({
                logType: 'GetAdminRoleWarn',
                errMsg: error.message,
                errStack: error.stack,
            });
            return false;
        }
    }
    /**
     * 获取用户来源信息
     */
    getUserSource() {
        const openId = this.configService.wxOpenId;
        const uid = this.configService.getEnvironmentVariable('TCB_UUID');
        return {
            uid: (openId || uid),
            /** uid 类型, 1.tcb 2.微信 3.企业微信 4.weda内部 */
            source: openId ? 2 : 1,
        };
    }
};
WedaRequestService = __decorate([
    inversify_1.injectable(),
    __metadata("design:paramtypes", [config_service_1.ConfigService,
        tcb_service_1.TcbService,
        logger_service_1.LoggerService])
], WedaRequestService);
exports.WedaRequestService = WedaRequestService;
